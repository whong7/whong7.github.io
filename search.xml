<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[策略模式]]></title>
      <url>http://whong7.github.io/2016/10/27/1.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>定义了<strong>算法族</strong>，分别封装起来，让他们之间可以相互代替，此模式让算法的变化独立于使用算法的客户</p>
<ul>
<li>策略模式核心是对算法的封装</li>
<li>专注于实现算法（策略）的选择，支持运行时动态改变策略</li>
<li>具体实现是把变化的部分找出来，定义为接口，每个接口对应一组算法，每一个都是一种策略</li>
<li>同一接口下的算法是可以相互替换的</li>
<li>算法是独立于客户代码的，也就是对算法封装的具体体现</li>
</ul>
<h3 id="使用情形"><a href="#使用情形" class="headerlink" title="使用情形"></a>使用情形</h3><ul>
<li><strong>父类</strong>中的 部分 方法，会因 <strong>子类</strong> 的实现而有区别，单纯的继承并不能很好的解决问题，会导致需求修改时：父类和子类都需要修改。</li>
<li><strong>做法：</strong>抽象超类中，会变化的部分取出并“封装”起来，好让其他部分不会受到影响。</li>
<li><strong>结果：</strong>代码变化引起的不经意后果变少，系统变得更有弹性。</li>
</ul>
<a id="more"></a>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul>
<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起，以便以后可以轻易的改动或拓展此部分，而不影响不需要变化的其他部分</li>
<li>针对接口编程，而不是针对实现编程：将行为通过接口实现，而不是绑定到父类中</li>
<li>多用组合，少用继承</li>
</ul>
<h3 id="示例问题"><a href="#示例问题" class="headerlink" title="示例问题"></a>示例问题</h3><p>现有100种Duck，叫声、飞行都是不同的。于是我们定义了100个类来表示100种不同类型的Duck。我们发现Duck问题中最难处理的部分就是fly、quack这两个行为，一旦发生变化我们就需要修改具体Duck类，甚至是Duck基类，不仅需要花费大量的时间，而且所有具体Duck类中都实现了fly与quack方法，显得很臃肿。还有最重要的问题，我们无法动态地修改Duck的行为，比如小Duck游得慢叫声小，长大后游得快叫声大，也无法应对行为变化问题。。。。这一系列的问题想向我们说明一点：这从一开始就是一个糟糕的设计。</p>
<h3 id="如何应用策略模式？"><a href="#如何应用策略模式？" class="headerlink" title="如何应用策略模式？"></a>如何应用策略模式？</h3><p>策略模式要求把变化的部分封装起来，首先，我们要找到代码中频频发生变化的部分<br>在上一个例子中，变化的部分是什么？<br>1.fly行为<br>2.quack行为<br>3.其它可能存在的行为<br>…<br>下面我们把这些行为封装起来</p>
<h4 id="将行为封装起来"><a href="#将行为封装起来" class="headerlink" title="将行为封装起来"></a>将行为封装起来</h4><p><strong><em>fly行为</em></strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyBehavior</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span>: <span class="title">FlyBehavior</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"I'm flying"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span>: <span class="title">FlyBehavior</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"I can't fly"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>quack行为</em></strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuackBehavior</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quack</span>: <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Quack"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span>: <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Slience"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squeak</span>: <span class="title">QuackBehavior</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">quack</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Squeak"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="封装好“变化”之后，我们的Duck基类也要做相应改变："><a href="#封装好“变化”之后，我们的Duck基类也要做相应改变：" class="headerlink" title="封装好“变化”之后，我们的Duck基类也要做相应改变："></a>封装好“变化”之后，我们的Duck基类也要做相应改变：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> flybehavior: <span class="type">FlyBehavior</span>?</div><div class="line">    <span class="keyword">var</span> quackBehavior: <span class="type">QuackBehavior</span>?</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">performFly</span><span class="params">()</span></span> &#123;</div><div class="line">        flybehavior?.fly()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</div><div class="line">        quackBehavior?.quack()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"swiming"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="现在来看看我们新的具体Duck类"><a href="#现在来看看我们新的具体Duck类" class="headerlink" title="现在来看看我们新的具体Duck类"></a>现在来看看我们新的具体Duck类</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span>: <span class="title">Duck</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        flybehavior = <span class="type">FlyWithWings</span>()</div><div class="line">        quackBehavior = <span class="type">Quack</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//test</span></div><div class="line">        <span class="keyword">let</span> mallard:<span class="type">Duck</span> = <span class="type">MallardDuck</span>()</div><div class="line">        mallard.performQuack()</div><div class="line">        mallard.performFly()</div><div class="line">        <span class="comment">//模型可以动态的改变飞行行为，如果把行为的实现绑死在鸭子勒种，无法做到这样</span></div><div class="line">        mallard.flybehavior = <span class="type">FlyNoWay</span>()</div><div class="line">        mallard.performFly()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">输出结果：</div><div class="line"><span class="type">Quack</span></div><div class="line"><span class="type">I'm</span> flying</div><div class="line"><span class="type">I</span> can't fly</div></pre></td></tr></table></figure>
<p><a href="https://github.com/whong7/DesignPatterns/raw/master/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%88Strategy%20Pattern%EF%BC%89/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.zip" target="_blank" rel="external">demo下载</a></p>
<h3 id="思维导图解析"><a href="#思维导图解析" class="headerlink" title="思维导图解析"></a>思维导图解析</h3><p><img src="https://ws1.sinaimg.cn/large/9632d3f5gy1fctuasn7bqj21kw0scatg" alt=""></p>
<p><a href="https://github.com/whong7/DesignPatterns/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/1.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" target="_blank" rel="external">思维导图下载</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>策略模式的核心是要把频繁发生变化的部分封装起来，作用是把变化部分的影响隔离开，避免局部的变化对其它fixed部分造成影响，设计时可能需要更多的时间，但便于维护、复用与扩展，在本例中，Fly、Quack行为都可以在新的类（如Pig）中复用；一旦行为发生变化我们只需要修改各个行为接口，最多再对Duck基类做简单修改就可以从容地应对变化了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS&OC交互（WKWebView）]]></title>
      <url>http://whong7.github.io/2016/10/24/JS&OC%E4%BA%A4%E4%BA%92%EF%BC%88WKWebView%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="oc调用js"><a href="#oc调用js" class="headerlink" title="oc调用js"></a>oc调用js</h1><p><img src="http://ww1.sinaimg.cn/large/9632d3f5jw1f9849e6x9pj20of0d2tbi.jpg" alt=""></p>
<a id="more"></a>
<p>UIwebView 使用 WKWebView 取代。优化了js交互代理方法，并且开元，完善了UIwebView 的内存泄漏问题，大幅度减小了内存；<br>UIWebView自iOS2就有，WKWebView从iOS8才有，毫无疑问WKWebView将逐步取代笨重的UIWebView。<br><strong>下面列举一些其它的优势：</strong></p>
<ul>
<li>更多的支持HTML5的特性</li>
<li>官方宣称的高达60fps的滚动刷新率以及内置手势</li>
<li>Safari相同的JavaScript引擎</li>
<li>将UIWebViewDelegate与UIWebView拆分成了14类与3个协议(官方文档说明)</li>
<li>另外用的比较多的，增加加载进度属性：estimatedProgress</li>
</ul>
<h1 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h1><p>代码作用：取到网络上点击图片的地址，并返回图片的位置信息（详见动图展示）</p>
<p><strong>OC代码：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="keyword">@import</span> WebKit;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">WKNavigationDelegate</span>,<span class="title">WKUIDelegate</span>,<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>)<span class="built_in">WKWebView</span> *webView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">WKWebView</span> *)webView &#123;</div><div class="line">    <span class="keyword">if</span> (_webView == <span class="literal">nil</span>) &#123;</div><div class="line">        _webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</div><div class="line">        </div><div class="line">        _webView.navigationDelegate = <span class="keyword">self</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//拦截信息</span></div><div class="line">        _webView.UIDelegate = <span class="keyword">self</span>;</div><div class="line">        </div><div class="line">        <span class="comment">//添加点击手势 需解决拦截棒</span></div><div class="line">        <span class="built_in">UITapGestureRecognizer</span> *tap = [[<span class="built_in">UITapGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(tapWebView:)];</div><div class="line">        [_webView addGestureRecognizer:tap];</div><div class="line">        tap.delegate = <span class="keyword">self</span>;</div><div class="line">        [_webView addGestureRecognizer:tap];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _webView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)tapWebView:(<span class="built_in">UITapGestureRecognizer</span> *)gesture&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,gesture);</div><div class="line">    <span class="built_in">CGPoint</span> point = [gesture locationInView:<span class="keyword">self</span>.webView];</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *js = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"wh_imageAourceFromPoint(%g,%g)"</span>,point.x,point.y];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> checkJsWithCompletion:^&#123;</div><div class="line">        <span class="comment">//执行js</span></div><div class="line">        [<span class="keyword">self</span>.webView evaluateJavaScript:js completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====&gt;%@"</span>,result);</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.webView];</div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://image.baidu.com"</span>];</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.webView loadRequest:request];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - WKUIDelegate</span></div><div class="line"><span class="comment">//拦截 js 中的 alert</span></div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,message);</div><div class="line">    completionHandler();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//允许多个手势并发</span></div><div class="line"><span class="meta">#pragma mark - UIGestureRecognizerDelegate</span></div><div class="line">-(<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - webview 代理方法</span></div><div class="line"><span class="comment">//截取网络访问请求</span></div><div class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,navigationAction.request);</div><div class="line">    <span class="comment">//决定对请求的处理</span></div><div class="line">    decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//完成导航</span></div><div class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="built_in">WKNavigation</span> *)navigation</div><div class="line">&#123;</div><div class="line">   <span class="comment">//注入 js</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="keyword">self</span> jsString]);</div><div class="line">    </div><div class="line">    [webView evaluateJavaScript:[<span class="keyword">self</span> jsString] completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,result);</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span> checkJsWithCompletion:^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"js 注入成功"</span>);</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//检验注入是否完成,获取js完成后续操作</span></div><div class="line">- (<span class="keyword">void</span>)checkJsWithCompletion:(<span class="keyword">void</span>(^)())completion&#123;</div><div class="line">    <span class="built_in">NSString</span> *js = <span class="string">@"typeof wh_imageAourceFromPoint;"</span>;</div><div class="line">    [<span class="keyword">self</span>.webView evaluateJavaScript:js completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,result);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (error != <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"error"</span>);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 执行完成回调</span></div><div class="line">        completion();</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didStartProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)jsString &#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"tools.js"</span> withExtension:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithContentsOfURL:url encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>js代码：tools.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wh_imageAourceFromPoint</span>(<span class="params">x,y</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.elementFromPoint(x,y);</div><div class="line">    <span class="keyword">if</span>(element.tagName == <span class="string">'IMG'</span> &amp;&amp; element.src)&#123;</div><div class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</div><div class="line">        alert(rect.top + <span class="string">'|'</span> + rect.left + <span class="string">'|'</span> + rect.right + <span class="string">'|'</span> +rect.height);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> element.src;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wh_hello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="http://ww2.sinaimg.cn/large/9632d3f5jw1f984heendgg20ko0oa1kx.gif" alt=""></p>
<p><a href="https://github.com/whong7/whong7.github.io/raw/master/demo/WKWebView.zip" target="_blank" rel="external">demo下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>http://whong7.github.io/2016/10/24/0.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h3><ul>
<li>自问：设计模式是什么？</li>
<li>自答：设计模式是由代码结构优化经验萃取出来的理论知识，应用成熟的设计模式能够增强代码的可复用性、可扩展性与可维护性。</li>
<li>自问：你好像很专业的样子，那好，既然设计模式有这么多好处，那是不是应用了设计模式的设计都是好设计？</li>
<li>自答：当然不是，我们不能为了使用模式而使用模式。设计模式可不能滥用，毕竟应用设计模式必须要作出一些牺牲（比如增加类结构的复杂性…），所以滥用设计模式的话是会出事的。而且，就算我们有了锤子，也不能把所有问题都看作钉子吧？</li>
</ul>
<h3 id="要不要使用设计模式？"><a href="#要不要使用设计模式？" class="headerlink" title="要不要使用设计模式？"></a>要不要使用设计模式？</h3><ul>
<li>这是个值得思考的问题，毕竟现在我们已经拥有了一把锤子，要不要用它当然成了问题，毕竟不是所有的问题都可以用锤子来解决。退一步讲，即便所有问题都能用锤子解决，我们也不确定使用锤子是不是最好的解决方案（拔钉子的话，可能用钳子更好些…）</li>
<li>当我们拿着某个设计模式想放进我们的代码中时，最好权衡一下利弊，诚然，设计模式具有的设计上的弹性一定会给我们之后的维护变更带来些便利。但是利与弊到底哪个更多一些，我们需要先回答几个问题再做决定：<ul>
<li>我们的项目是不是几乎不涉及维护或者没有后续版本，那么我们引入设计模式还有必要吗？</li>
<li>我们项目的规模是不是大到了不用设计模式不行的地步？</li>
<li>这个设计模式用在这里合适吗？有没有更合适的？</li>
<li>非要用设计模式吗？可不可以用几个简单的设计原则来代替？</li>
<li>引入设计模式之后，代码结构的复杂度大大增加，重构的成本我们可以接受吗？</li>
<li>如果深思熟虑之后，还是觉得使用设计模式比较好，那么，放心去用吧，之后好好享受设计模式带来的好处吧</li>
</ul>
</li>
</ul>
<h3 id="设计原则总结"><a href="#设计原则总结" class="headerlink" title="设计原则总结"></a>设计原则总结</h3><p>设计原则都是一些简单的指导意见，没有固定的实现，因而设计原则也更加灵活，常见的设计原则如下：</p>
<ul>
<li>封装变化（把易于发生变化的部分抽出来，以减少其变化对其它部分的影响）</li>
<li>多用组合，少用继承（组合比继承更有弹性）</li>
<li>针对接口编程，不针对实现编程（使用接口可以避免直接依赖具体类）</li>
<li>为交互对象之间的松耦合设计而努力（更松的耦合意味着更多的弹性）</li>
<li>类应该对扩展开放，对修改关闭（open-close原则）</li>
<li>依赖抽象，不要依赖具体类（减少对具体类的直接依赖）</li>
<li>只和朋友交谈（密友原则）</li>
<li>别找我，我会找你（Don’t call me, I will call you back.安卓开发的大原则）</li>
<li>类应该只有一个改变的理由（单一责任原则）</li>
<li>能用设计原则解决的问题就不要用设计模式（杀鸡焉用宰牛刀…），因为设计原则实现起来更加灵活，更加轻巧（不用去考虑模式的条条框框…）</li>
</ul>
<h3 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h3><table>
<thead>
<tr>
<th>名称</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>策略模式（Strategy）</td>
<td>把可以替换的算法步骤封装成一个个算法族，供运行时动态选择</td>
</tr>
<tr>
<td>观察者模式（Observer）</td>
<td>定义并维护对象之间的一对多关系</td>
</tr>
<tr>
<td>装饰者模式（Decorator）</td>
<td>建立拥有共同超类的装饰者与被装饰者来实现功能的动态扩展</td>
</tr>
<tr>
<td>工厂模式（Factory）</td>
<td>封装对象的创建过程，包括工厂方法模式和抽象工厂模式</td>
</tr>
<tr>
<td>单件（例）模式（Singleton）</td>
<td>用来创建唯一的对象（比如数据库连接对象，线程池对象等等）</td>
</tr>
<tr>
<td>命令模式（Command）</td>
<td>封装方法调用细节，解耦请求者与执行者</td>
</tr>
<tr>
<td>适配器模式（Adapter）</td>
<td>用来实现不同接口间的转换</td>
</tr>
<tr>
<td>外观模式（Facade）</td>
<td>为复杂的子系统提供简单易用的高层接口</td>
</tr>
<tr>
<td>模版方法模式（Template Method）</td>
<td>用来封装算法骨架（流程），某些步骤由子类实现</td>
</tr>
<tr>
<td>迭代器模式（Iterator）</td>
<td>用来封装遍历细节</td>
</tr>
<tr>
<td>组合模式（Composite）</td>
<td>提供一种层级结构，使得我们能够忽略对象与对象集合间的差异，一视同仁地对待它们</td>
</tr>
<tr>
<td>状态模式（State）</td>
<td>把所有动作都封装在状态对象中，状态持有者将行为委托给当前状态对象</td>
</tr>
<tr>
<td>代理模式（Proxy）</td>
<td>通过插入第三方（代理对象）来分离调用者和被调用者（不同于执行者）</td>
</tr>
<tr>
<td>复合模式（Compound）</td>
<td>复合模式（Compound）    将多个模式组合结合起来形成一个“框架”，以解决一般性问题</td>
</tr>
<tr>
<td>桥接模式（Bridge）</td>
<td>将抽象的控制类与具体实现类通过组合解耦，使得抽象层类与实现层类可以对立与对方而变化</td>
</tr>
<tr>
<td>生成器模式（Builder）</td>
<td>用来封装组合结构（树形结构）的构造过程，与迭代器模式类似，都隐藏了组合结构的内部实现，只提供一组用于创建组合结构的接口</td>
</tr>
<tr>
<td>责任链模式（Chain of Responsibility）</td>
<td>让一个请求可以被一组接收者顺序处理，类似于Android处理请求的方式：一个接收者捕获请求后可以return true消费掉请求，也可以return false传递给接收者队列中的下一个接收者（观察者）</td>
</tr>
<tr>
<td>蝇量模式（Flyweight）</td>
<td>抽象出对象管理层来统一管理大量的同类型对象，以减少运行时对象实例的个数，减少内存消耗</td>
</tr>
<tr>
<td>解释器模式（Interpreter）</td>
<td>用来为简单语言创建解释器，将语法规则直接映射为各个类，结构简单，但效率较低</td>
</tr>
<tr>
<td>中介者模式（Mediator）</td>
<td>引入中介者来封装多个对象间的复杂交互，以降低同级（在类结构统一层次上的）对象间的依赖</td>
</tr>
<tr>
<td>备忘录模式（Memento）</td>
<td>支持对象状态的保存与恢复，并将对象状态数据封装起来，独立于客户代码以提供保护（Java中可以结合序列化反序列化技术来实现该模式）</td>
</tr>
<tr>
<td>原型模式（Prototype）</td>
<td>以现有的对象为原型，通过clone得到新的对象（以简化新对象的创建过程）</td>
</tr>
<tr>
<td>访问者模式（Visitor）</td>
<td>为组合结构添加新的操作，而不需要频繁的改变组合结构</td>
</tr>
</tbody>
</table>
<h3 id="面向对象的设计（Object-Oriented-Design）"><a href="#面向对象的设计（Object-Oriented-Design）" class="headerlink" title="面向对象的设计（Object Oriented Design）"></a>面向对象的设计（Object Oriented Design）</h3><p>一直伴随着OOD的问题就是“折衷”（或者说是“取舍”），最简单的例子——要不要用设计模式？</p>
<ul>
<li>用，意味着将产生复杂的类关系，多层的抽象，我们将牺牲易读性换取易扩展性、易维护性或者其它特性</li>
<li>不用，意味着我们不需要对现有代码进行重构（或者不用去在复杂的设计上耗费过多的时间），但使用设计模式的所有好处我们就都享受不到了</li>
<li>二者选其一，这就是一个“取舍”，或者创造第三个选项（比如使用设计原则），这就是一个“折衷”</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SizeClass(Xcode8)]]></title>
      <url>http://whong7.github.io/2016/08/27/sizeClass/</url>
      <content type="html"><![CDATA[<h3 id="SizeClass-storyboard编辑"><a href="#SizeClass-storyboard编辑" class="headerlink" title="SizeClass storyboard编辑"></a>SizeClass storyboard编辑</h3><ul>
<li>Size Class最大的帮助是,解决横屏适配和iPhone iPad共享一个设计板</li>
<li>plus系列: 竖屏: CR  横屏:RC   /  非plus系统: 竖屏CR  横屏CC</li>
</ul>
<a id="more"></a>
<p> <img src="http://cc.cocimg.com/api/uploads/20141217/1418795540826221.png" alt=""></p>
<ul>
<li><p>xcode 8 SizeClass 竖屏 设定如下图<br><img src="http://ww2.sinaimg.cn/large/9632d3f5gw1f9391n8t2qj21kw0zbduc.jpg" alt=""></p>
</li>
<li><p>xcode 8 SizeClass 横屏 设定如下图</p>
<ul>
<li>plus系统需要选择RC</li>
<li>非plus系统需要选择CC</li>
</ul>
</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/9632d3f5gw1f9393jtfdcj21kw0tjtkx.jpg" alt=""></p>
<ul>
<li>运行结果如下，虚拟器 6s</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/9632d3f5gw1f9399mjl5tg20gx0gdk2x.gif" alt=""></p>
<h3 id="代码监听旋转方向"><a href="#代码监听旋转方向" class="headerlink" title="代码监听旋转方向"></a>代码监听旋转方向</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//previousTraitCollection: 转动之前的SizeClass</span></div><div class="line">- (<span class="keyword">void</span>)traitCollectionDidChange:(<span class="built_in">UITraitCollection</span> *)previousTraitCollection</div><div class="line">&#123;</div><div class="line">    <span class="comment">//NSLog(@"previousTraitCollection: %@", previousTraitCollection);</span></div><div class="line">    </div><div class="line">    <span class="comment">//代码获取当前方法的SizeCalss变化 --&gt; 目前的6S 高度会有R--&gt;C的变化</span></div><div class="line">    <span class="built_in">UIUserInterfaceSizeClass</span> hSizeClass = <span class="keyword">self</span>.traitCollection.verticalSizeClass;</div><div class="line">    <span class="keyword">if</span> (hSizeClass == <span class="built_in">UIUserInterfaceSizeClassCompact</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"横屏"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"竖屏"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"水平SizeClass: %zd"</span>, hSizeClass);</div><div class="line">    </div><div class="line">    <span class="comment">//_UITraitNameHorizontalSizeClass: 宽度 --&gt; w C</span></div><div class="line">    <span class="comment">//_UITraitNameVerticalSizeClass: 高度 --&gt; h R</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     &lt;UITraitCollection: 0x6100000c78c0; _UITraitNameUserInterfaceIdiom = Phone, _UITraitNameDisplayScale = 2.000000, _UITraitNameDisplayGamut = sRGB, _UITraitNameHorizontalSizeClass = Compact, _UITraitNameVerticalSizeClass = Regular, _UITraitNameTouchLevel = 0, _UITraitNameInteractionModel = 1, _UITraitNameUserInterfaceStyle = 1, _UITraitNameLayoutDirection = 0, _UITraitNameForceTouchCapability = 2, _UITraitNamePreferredContentSizeCategory = UICTContentSizeCategoryL&gt;</div><div class="line">     */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="demo下载地址"><a href="#demo下载地址" class="headerlink" title="demo下载地址"></a>demo下载地址</h3><p><a href="https://github.com/whong7/whong7.github.io/raw/master/demo/SizeClass%20%E6%B5%8B%E8%AF%95.zip" target="_blank" rel="external">SizeClass.zip</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nav边缘回退手势 替换为 全屏幕回退手势]]></title>
      <url>http://whong7.github.io/2016/08/21/nav%E8%BE%B9%E7%BC%98%E5%9B%9E%E9%80%80%E6%89%8B%E5%8A%BF%20%E6%9B%BF%E6%8D%A2%E4%B8%BA%20%E5%85%A8%E5%B1%8F%E5%B9%95%E5%9B%9E%E9%80%80%E6%89%8B%E5%8A%BF%20/</url>
      <content type="html"><![CDATA[<ul>
<li>在分类中通过方法交换，实现对系统方法的替换，可以实现便捷编程的目的；</li>
<li>将该分类拖拽到项目中，便可将 系统nav的边缘拖拽回退 转化成 全屏幕拖拽回退</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/9632d3f5gw1f9mtxj7dohg20a80i6452.gif" alt=""></p>
<a id="more"></a>
<h2 id="方法交换代码"><a href="#方法交换代码" class="headerlink" title="方法交换代码"></a>方法交换代码</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  UINavigationController+WHObjcSugar.m</span></div><div class="line"><span class="comment">//  Created by 吴鸿 on 2016/6/10.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 吴鸿. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"UINavigationController+WHObjcSugar.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WHFullScreenPopGestureRecognizerDelegate</span> : <span class="title">NSObject</span> &lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UINavigationController</span> *navigationController;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WHFullScreenPopGestureRecognizerDelegate</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIPanGestureRecognizer</span> *)gestureRecognizer &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是否是根控制器，如果是，取消手势</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.viewControllers.count &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果正在转场动画，取消手势</span></div><div class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span>.navigationController valueForKey:<span class="string">@"_isTransitioning"</span>] boolValue]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断手指移动方向</span></div><div class="line">    <span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:gestureRecognizer.view];</div><div class="line">    <span class="keyword">if</span> (translation.x &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UINavigationController</span> (<span class="title">WHObjcSugar</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    </div><div class="line">    Method originalMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(pushViewController:animated:));</div><div class="line">    Method swizzledMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(wh_pushViewController:animated:));</div><div class="line">    </div><div class="line">    method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)wh_pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//判断 手势识别器 的view 上面是否含有我们自定义的手势</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.interactivePopGestureRecognizer.view.gestureRecognizers containsObject:<span class="keyword">self</span>.wh_popGestureRecognizer]) &#123;</div><div class="line">        <span class="comment">//如果没有添加 平移手势</span></div><div class="line">        [<span class="keyword">self</span>.interactivePopGestureRecognizer.view addGestureRecognizer:<span class="keyword">self</span>.wh_popGestureRecognizer];</div><div class="line">        <span class="comment">//为平移手势 添加 监听者 和 执行方法，只替换手势，其他不变。</span></div><div class="line">        </div><div class="line">        <span class="comment">//1.系统自带的手势是UIScreenEdgePanGestureRecognizer类型对象,屏幕边缘滑动手势</span></div><div class="line">        <span class="comment">//2.系统自带手势target是_UINavigationInteractiveTransition类型的对象</span></div><div class="line">        <span class="comment">//3.target调用的action方法名叫handleNavigationTransition:</span></div><div class="line">        </div><div class="line">        <span class="built_in">NSArray</span> *targets = [<span class="keyword">self</span>.interactivePopGestureRecognizer valueForKey:<span class="string">@"targets"</span>];</div><div class="line">        <span class="keyword">id</span> internalTarget = [targets.firstObject valueForKey:<span class="string">@"target"</span>];</div><div class="line">        SEL internalAction = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"handleNavigationTransition:"</span>);</div><div class="line">        <span class="comment">// 什么时候调用：每次触发手势之前都会询问下代理，是否触发。// 作用：拦截手势触发</span></div><div class="line">        <span class="keyword">self</span>.wh_popGestureRecognizer.delegate = [<span class="keyword">self</span> wh_fullScreenPopGestureRecognizerDelegate];</div><div class="line">        [<span class="keyword">self</span>.wh_popGestureRecognizer addTarget:internalTarget action:internalAction];</div><div class="line">        </div><div class="line">        <span class="comment">// 禁用系统的交互手势</span></div><div class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//保险起见，如果当前控制器不是 导航控制器的 自控制器，就使用 “系统自带的方法”（交换过的）！</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.viewControllers containsObject:viewController]) &#123;</div><div class="line">        [<span class="keyword">self</span> wh_pushViewController:viewController animated:animated];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (WHFullScreenPopGestureRecognizerDelegate *)wh_fullScreenPopGestureRecognizerDelegate &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//_cmd在Objective-C的方法中表示当前方法的selector，正如同self表示当前方法调用的对象实例(补充在本文最下面)。</span></div><div class="line">    WHFullScreenPopGestureRecognizerDelegate *delegate = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</div><div class="line">    <span class="keyword">if</span> (!delegate) &#123;</div><div class="line">        delegate = [[WHFullScreenPopGestureRecognizerDelegate alloc] init];</div><div class="line">        delegate.navigationController = <span class="keyword">self</span>;</div><div class="line">        </div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> delegate;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIPanGestureRecognizer</span> *)wh_popGestureRecognizer &#123;</div><div class="line">    <span class="comment">//使用 动态添加属性 的方法，避免每次重新创建</span></div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGestureRecognizer = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</div><div class="line">    <span class="comment">//如果对象 有这个属性，直接用；没有的话在进行创建</span></div><div class="line">    <span class="keyword">if</span> (panGestureRecognizer == <span class="literal">nil</span>) &#123;</div><div class="line">        panGestureRecognizer = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] init];</div><div class="line">        panGestureRecognizer.maximumNumberOfTouches = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, panGestureRecognizer, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> panGestureRecognizer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//补充 _cmd 用法</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> _cmd在Objective-C的方法中表示当前方法的selector，正如同self表示当前方法调用的对象实例。</div><div class="line"> </div><div class="line"> 1、</div><div class="line"> //比如需要打印当前被调用的方法，可以在一个方法中添加：</div><div class="line"> NSLog(@"%@ call",NSStringFromSelector(_cmd));</div><div class="line"> </div><div class="line"> 2、</div><div class="line"> 还有一种用法是在runtime的时候，比如在某个分类方法里为对象动态添加属性，由于_cmd是在编译时候(compile-time)就已经确定的值，所以可以直接使用</div><div class="line"> </div><div class="line"> 该用法取自于: forkingdog / UITableView-FDTemplateLayoutCell 中的用法</div><div class="line"> </div><div class="line"> 由于objc_getAssociatedObject 和 objc_setAssociatedObject 第二个参数需要传入一个属性的键名，是 const void * 类型的，通常的做法是</div><div class="line"> 而使用_cmd可以直接使用该@selector的名称，即someCategoryMethod，并且能保证改名称不重复</div><div class="line"> </div><div class="line"> */</div></pre></td></tr></table></figure>
<h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/demo/UINavigationController%2BWHObjcSugar.zip" target="_blank" rel="external">分类下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS&OC交互（UIwebView、JSContext）]]></title>
      <url>http://whong7.github.io/2016/08/14/JS&OC%E4%BA%A4%E4%BA%92%EF%BC%88UIwebView%E3%80%81JSContext%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="oc调用js"><a href="#oc调用js" class="headerlink" title="oc调用js"></a>oc调用js</h1><p><strong>代码：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIWebView</span> *webView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"JSContextDemo.html"</span> ofType:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc] initWithURL:[<span class="built_in">NSURL</span> URLWithString:path]];</div><div class="line">    [_webView loadRequest:request];</div><div class="line">    </div><div class="line">    <span class="meta">#pragma mark - JS调用OC的方法</span></div><div class="line">    <span class="comment">// 拿到JS的上下文</span></div><div class="line">    JSContext *context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     1.找到网页分享标签点击时调用的函数名</div><div class="line">     2.定义好JS要调用的OC的代码块</div><div class="line">    */</div><div class="line">    context[<span class="string">@"share"</span>] = ^() &#123;</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"在这里面实现OC的分享的操作"</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - OC调用JS的点击事件</span></div><div class="line">- (<span class="keyword">IBAction</span>)OC_invokJS:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 拿到JS的上下文</span></div><div class="line">    JSContext *context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 直接调用JS的函数,还可以向函数里面传入需要的参数.在XCode中向JS中的alert传入需要的message</span></div><div class="line">    <span class="built_in">NSString</span> *textJS = <span class="string">@"showAlert('这个message是XCode中传入的')"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 执行这个JS代码</span></div><div class="line">    [context evaluateScript:textJS];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>JSContextDemo.html文件：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        </div><div class="line">            // 分享标签的点击事件</div><div class="line">            function shareBtnClick() &#123;</div><div class="line">                // 定义一个分享函数,作为页面分享操作的标记,类似于自定义协议头一样的</div><div class="line">                share();</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">            // JS的这个方法是准备好的给OC调用的,而且OC那边还可以传参数进来</div><div class="line">            function showAlert(message)&#123;</div><div class="line">                alert(message);</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line">    </div><div class="line">    &lt;body&gt;</div><div class="line">        </div><div class="line">        &lt;h2&gt; JSContextDemo &lt;/h2&gt;</div><div class="line">        </div><div class="line">        &lt;br/&gt;</div><div class="line">        </div><div class="line">        &lt;!--    分享按钮    --&gt;</div><div class="line">        &lt;button type=&quot;button&quot; onclick=&quot;shareBtnClick()&quot;&gt;分享&lt;/button&gt;</div><div class="line">        </div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/9632d3f5jw1f983zdu1nwg20bj0n27aw.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS&OC交互（UIwebView）]]></title>
      <url>http://whong7.github.io/2016/08/14/JS&OC%E4%BA%A4%E4%BA%92%EF%BC%88UIwebView%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="oc调用js"><a href="#oc调用js" class="headerlink" title="oc调用js"></a>oc调用js</h1><p>在网页加载完毕的时候修改网页内容</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UIWebViewDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIWebView</span> *webView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.maoyan.com/newGuide/wcqp"</span>]];</div><div class="line">    [<span class="keyword">self</span>.webView loadRequest:request];</div><div class="line">    <span class="keyword">self</span>.webView.delegate = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - UIWebViewDelegate</span></div><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView&#123;</div><div class="line">    <span class="comment">// 使用 OC 的代码去执行JS的代码.让webView里面的内容进行改变</span></div><div class="line">    <span class="comment">// 后面执行的js代码不用记,到时候咨询前端的程序员就可以了</span></div><div class="line">    <span class="comment">// 移除头</span></div><div class="line">    [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@"var hd = document.getElementById('hd');hd.parentElement.removeChild(hd);"</span>];</div><div class="line">    <span class="comment">// 移除尾</span></div><div class="line">    [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@"var ft = document.getElementById('ft');ft.parentElement.removeChild(ft);"</span>];</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>调用js语句之前：</strong><br>需要删除 网页头部视图 与 网页尾部视图<br><img src="http://ww4.sinaimg.cn/large/9632d3f5jw1f9835ekarcg20bd0ko4mw.gif" alt=""></p>
<p><strong>调用js语句之后：</strong></p>
<p><img src="http://ww1.sinaimg.cn/large/9632d3f5jw1f9837rko6fg20bd0koe81.gif" alt=""></p>
<p><strong>js调用oc:</strong></p>
<p>与前端的程序员定一个自定义的协议头,然后在该方法里面判断是否是这个协议头,如果是,不去加载页面,并且做自己事情就可以了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UIWebViewDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIWebView</span> *webView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.maoyan.com/newGuide/wcqp?uuid=82981ACB37B65C58C702647A8D18849A9A0962CE44E9F6BAD28B0A4B06BB8314&amp;utm_term=7.1.1&amp;utm_source=AppStore&amp;utm_content=82981ACB37B65C58C702647A8D18849A9A0962CE44E9F6BAD28B0A4B06BB8314&amp;version_name=7.1.1&amp;utm_medium=iphone&amp;lat=40.058798&amp;utm_campaign=AmovieBmovieH0&amp;pushToken=548bf2eb%201d53e305%20b09aafda%20299abdf7%20680c708f%20c404644d%20fbf0c996%20632dc364&amp;lng=116.335873&amp;f=ios&amp;cityId=1&amp;ci=1&amp;msid=D061DF57-2504-45E7-B9DB-34DD13A838892016-08-14-%E4%B8%8A%E5%8D%889-30800"</span>]];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.webView loadRequest:request];</div><div class="line">    <span class="keyword">self</span>.webView.delegate = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - UIWebViewDelegate</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  是否要加载某个请求,如果返回true,代表要加载该请求,如果返回false,那么代表不去加载这个请求</div><div class="line"> *  我们可以在这个方法里面去监听webView当前加载的地址</div><div class="line"> *  如果以后开发中,遇到:点击webView中某个按钮,要弹出原生控件的话,就可以去与前端的程序员定一个自定义的协议头,然后在该方法里面判断是否是这个协议头,如果是,不去加载页面,并且做自己事情就可以了</div><div class="line"> *</div><div class="line"> *  @param webView        &lt;#webView description#&gt;</div><div class="line"> *  @param request        &lt;#request description#&gt;</div><div class="line"> *  @param navigationType &lt;#navigationType description#&gt;</div><div class="line"> *</div><div class="line"> *  @return &lt;#return value description#&gt;</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 如何取出当前webView加载的是哪个网址?</span></div><div class="line">    <span class="comment">// 如果url是以 meituanmovie 开头的话,那么就去打开原生的界面</span></div><div class="line">    <span class="built_in">NSString</span> *urlString = request.URL.absoluteString;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, urlString);</div><div class="line">    <span class="comment">// 判断一下协议头是否是我们自己的</span></div><div class="line">    <span class="keyword">if</span> ([urlString hasPrefix:<span class="string">@"meituanmovie"</span>]) &#123;</div><div class="line">        <span class="comment">// 如果是,就打开原生的页面</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"打开原生页面,参数是:%@"</span>, request.URL.query);</div><div class="line">        <span class="comment">// ..........</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView&#123;</div><div class="line">    <span class="comment">// 使用 OC 的代码去执行JS的代码.让webView里面的内容进行改变</span></div><div class="line">    <span class="comment">// 后面执行的js代码不用记,到时候咨询前端的程序员就可以了</span></div><div class="line">    <span class="comment">// 移除头</span></div><div class="line">    [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@"var hd = document.getElementById('hd');hd.parentElement.removeChild(hd);"</span>];</div><div class="line">    <span class="comment">// 移除尾</span></div><div class="line">    [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@"var ft = document.getElementById('ft');ft.parentElement.removeChild(ft);"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>NSLog输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2016-08-14 23:01:35.703 oc与js互调[40973:1822781] http://m.maoyan.com/newGuide/wcqp?uuid=82981ACB37B65C58C702647A8D18849A9A0962CE44E9F6BAD28B0A4B06BB8314&amp;utm_term=7.1.1&amp;utm_source=AppStore&amp;utm_content=82981ACB37B65C58C702647A8D18849A9A0962CE44E9F6BAD28B0A4B06BB8314&amp;version_name=7.1.1&amp;utm_medium=iphone&amp;lat=40.058798&amp;utm_campaign=AmovieBmovieH0&amp;pushToken=548bf2eb%201d53e305%20b09aafda%20299abdf7%20680c708f%20c404644d%20fbf0c996%20632dc364&amp;lng=116.335873&amp;f=ios&amp;cityId=1&amp;ci=1&amp;msid=D061DF57-2504-45E7-B9DB-34DD13A838892016-08-14-%E4%B8%8A%E5%8D%889-30800</div><div class="line">2016-08-14 23:01:44.603 oc与js互调[40973:1822781] meituanmovie://www.meituan.com/movie_schedule?id=247713&amp;nm=%E5%8D%B1%E5%9F%8E&amp;index=reserve</div><div class="line">2016-08-14 23:01:44.604 oc与js互调[40973:1822781] 打开原生页面,参数是:id=247713&amp;nm=%E5%8D%B1%E5%9F%8E&amp;index=reserve</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/9632d3f5jw1f983fzz2u2j20du0ne78j.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[截屏 & 图片缩放（Swift）]]></title>
      <url>http://whong7.github.io/2016/07/14/%E6%88%AA%E5%B1%8F%20&%20%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE%EF%BC%88Swift%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>截屏的功能:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private func getScreenSnap() -&gt; <span class="built_in">UIImage</span>? &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 先获取到window</span></div><div class="line">    let window = <span class="built_in">UIApplication</span>.shared.keyWindow!</div><div class="line"></div><div class="line">    <span class="comment">// 开启上下文</span></div><div class="line">    <span class="comment">// 如果最后一参数传入0的话，会按照屏幕的真实大小来截取，就是不会截取缩放之后的内容</span></div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(window.bounds.size, <span class="literal">false</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 将window的内容渲染到上下文中</span></div><div class="line">    window.drawHierarchy(<span class="keyword">in</span>: window.bounds, afterScreenUpdates: <span class="literal">false</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 取到上下文中的图片</span></div><div class="line">    let image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">    <span class="comment">// 关闭上下文</span></div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>()</div><div class="line">    <span class="comment">// 返回结果</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> image</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>缩放到指定的宽度:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">func scaleTo(width: <span class="built_in">CGFloat</span>) -&gt; <span class="built_in">UIImage</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.size.width &lt; width &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 根据宽度求出等比例缩放之后的高度</span></div><div class="line">    let height = <span class="keyword">self</span>.size.height * (width / <span class="keyword">self</span>.size.width)</div><div class="line">    <span class="comment">// 定义一个范围</span></div><div class="line">    let rect = <span class="built_in">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: width, height: height)</div><div class="line">    <span class="comment">// 开启上下文</span></div><div class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(rect.size)</div><div class="line">    <span class="comment">// 会将当前图片的所有内容完整的画到上下文中</span></div><div class="line">    <span class="keyword">self</span>.draw(<span class="keyword">in</span>: rect)</div><div class="line">    <span class="comment">// 取值</span></div><div class="line">    let result = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>()!</div><div class="line">    <span class="comment">// 关闭上下文</span></div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>()</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用第三方开源库是否应该做二次封装（转）]]></title>
      <url>http://whong7.github.io/2016/02/14/%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%BA%93%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E5%81%9A%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>现在有大量的开源第三方库，大家几乎每个项目都有用到。<br>而这些库基本都提供了非常友好的接口，供应用层使用。<br>但是，考虑到版本升级，程序员的水平，甚至使用许可等方面的问题，我考虑对未来大多数要使用的第三方库进行二次封装。<br>下面是我想到的基于多人开发，有可能发布多次升级版本的情况下的优缺点。</p>
<a id="more"></a>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1：当自己的软件版本升级时，可能会出现需要更换第三方库的情况，一个库的使用不能满足新的需求，这时，如果使用了二次封装，那么库的更改和自己编写的应用层就可以脱离，只需要改写二次封装就可以实现。避免了走入应用层，改写大量的代码甚至软件流程和架构。<br>2：当第三方库发生官方升级和出现了官方对已知局限性及BUG的修订时，只需要在二次封装的接口层改动即可。<br>3：当需求必须对第三方库添加额外功能时，可以添加在二次封装层，避免了对第三方库本身的修改，减少了潜在危险。<br>4：新开发人员只需要对二次封装学习就能快速上手，因为二次封装是之前开发人员留下的成果，公司内部有丰富的资料和统一的编码风格，相对于第三方库本身学习要容易和快捷。<br>5：大家补充下。</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1：额外工作量：多数第三方库有比较友好的接口，添加一个二次封装会导致开发人员的首次开发中投入相对于直接使用第三方库较多的时间和精力。<br>2：针对优点3——直接修改第三方库：<br>  1．代码编写数量少：对库自身代码的改动往往只需要简单的代码就能实现外部改动需要较多代码数量的需求。<br>  2．运行效率高：嵌入在第三方库内部空间内的功能，必然要比在第三方库外添加的功能运行效率高。</p>
<h3 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a>个人理解：</h3><p>如果是还有人维护的第三方开源库，项目组人力不足的情况下，不进行二次封装，也不会有很大的风险。</p>
<p>如果开源库已经没有人维护，或者遇到问题响应速度非常慢，还是需要考虑进行二次封装。</p>
<p>总的来说，我喜欢进行二次封装，自己掌握主动。</p>
<p>原文地址：<a href="http://blog.csdn.net/pizi0475/article/details/7771811" target="_blank" rel="external">http://blog.csdn.net/pizi0475/article/details/7771811</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[视频截图，录制，压缩方式]]></title>
      <url>http://whong7.github.io/2015/07/20/%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%EF%BC%8C%E5%BD%95%E5%88%B6%EF%BC%8C%E5%8E%8B%E7%BC%A9/</url>
      <content type="html"><![CDATA[<h3 id="视频截图"><a href="#视频截图" class="headerlink" title="视频截图:"></a>视频截图:</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 1. 导入AVFountaion框架</div><div class="line"> 2. 创建图像资源生成器</div><div class="line"> 3. 调用方法, 来获取指定时间的截图</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="comment">//1. 获取URL</span></div><div class="line">    <span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"Cupid_高清.mp4"</span> withExtension:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">    <span class="comment">//2. 创建资源 --&gt; 找视频</span></div><div class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:url];</div><div class="line"></div><div class="line">    <span class="comment">//3. 创建图像资源生成器</span></div><div class="line">    <span class="built_in">AVAssetImageGenerator</span> *generator = [<span class="built_in">AVAssetImageGenerator</span> assetImageGeneratorWithAsset:asset];</div><div class="line"></div><div class="line">    <span class="comment">//4. 创建CMTime: 专们用于表示影片时间的值</span></div><div class="line">    <span class="comment">//帧数: 1S 24帧.  15~30  3gp:10~15</span></div><div class="line">    <span class="comment">//影片截图: 用第几秒+第几帧, 这样来获取比较合适</span></div><div class="line"></div><div class="line">    <span class="comment">//value: 你要获取第几帧</span></div><div class="line">    <span class="comment">//timescale: 一秒有几帧</span></div><div class="line">    <span class="comment">//time的结果 = value / timescale 单位是秒+帧</span></div><div class="line"></div><div class="line">    <span class="built_in">CMTime</span> time = <span class="built_in">CMTimeMake</span>(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithCMTime:time];</div><div class="line"></div><div class="line">    <span class="comment">//5. 指定时间, 异步生成图像</span></div><div class="line">    [generator generateCGImagesAsynchronouslyForTimes:@[value] completionHandler:^(<span class="built_in">CMTime</span> requestedTime, <span class="built_in">CGImageRef</span>  _Nullable image, <span class="built_in">CMTime</span> actualTime, <span class="built_in">AVAssetImageGeneratorResult</span> result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//这里不能使用桥接</span></div><div class="line">        <span class="comment">//self.imageView.image = (__bridge UIImage * _Nullable)(image);</span></div><div class="line"></div><div class="line">        <span class="comment">//6. 在主线程中更新UI</span></div><div class="line">        <span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageWithCGImage:image];</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;MobileCoreServices/MobileCoreServices.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AssetsLibrary/AssetsLibrary.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UINavigationControllerDelegate</span>, <span class="title">UIImagePickerControllerDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)  <span class="built_in">MPMoviePlayerController</span> *mpC;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 点击屏幕录制视频</div><div class="line"> 播放刚才录制的视频</div><div class="line"> 保存视频</div><div class="line"></div><div class="line"> iOS10注意添加授权Key</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="comment">//1. 先判断源类型是否可用</span></div><div class="line">    <span class="keyword">if</span> (![<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//2. 创建</span></div><div class="line">    <span class="built_in">UIImagePickerController</span> *pickerC = [<span class="built_in">UIImagePickerController</span> new];</div><div class="line"></div><div class="line">    <span class="comment">//3. 设置源类型 (默认就是UIImagePickerControllerSourceTypePhotoLibrary)</span></div><div class="line">    <span class="comment">//PhotoLibrary: 选择视频</span></div><div class="line">    <span class="comment">//Camera: 录制视频</span></div><div class="line">    pickerC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypeCamera</span>;</div><div class="line"></div><div class="line">    <span class="comment">//4. 设置媒体类型 默认是Image, kUTTypeImage = @"public.movie"</span></div><div class="line">    pickerC.mediaTypes = @[(<span class="built_in">NSString</span> *)kUTTypeMovie];</div><div class="line"></div><div class="line">    <span class="comment">//5. 设置代理</span></div><div class="line">    pickerC.delegate = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">    <span class="comment">//6. 模态弹出控制器</span></div><div class="line">    [<span class="keyword">self</span> presentViewController:pickerC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark picker的代理方法</span></div><div class="line">- (<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)info</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"info: %@"</span>, info);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     UIImagePickerControllerMediaType = "public.movie";</div><div class="line">     UIImagePickerControllerMediaURL = "file:///private/var/mobile/Containers/Data/Application/0DF55A9B-89D5-4477-BE3A-6CBAB2912419/tmp/49794758578__D28D3F45-60D0-47AE-9789-04698E5808A6.MOV";</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">//保存视频</span></div><div class="line">    <span class="comment">//此代理方法, 从相册选中一个照片/拍照/选中视频/录制视频都会走这个方法.</span></div><div class="line">    <span class="comment">//只有录制视频这种情况才需要保存视频</span></div><div class="line">    <span class="comment">//1. 保证媒体类型是视频 --&gt; Movie</span></div><div class="line">    <span class="built_in">NSString</span> *meidaTypeStr = info[<span class="built_in">UIImagePickerControllerMediaType</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ([meidaTypeStr isEqualToString:<span class="string">@"public.movie"</span>]) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.mpC == <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="comment">//强引用, 设置Frame, 添加到View上, 调用播放方法</span></div><div class="line">            <span class="keyword">self</span>.mpC = [<span class="built_in">MPMoviePlayerController</span> new];</div><div class="line">            <span class="keyword">self</span>.mpC.view.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">375</span>, <span class="number">500</span>);</div><div class="line">            [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.mpC.view];</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//网址不一样. 播放方法</span></div><div class="line">        <span class="comment">//UIImagePickerControllerMediaURL: 是视频地址, 也需要保证媒体类型是视频</span></div><div class="line">        <span class="keyword">self</span>.mpC.contentURL = info[<span class="built_in">UIImagePickerControllerMediaURL</span>];</div><div class="line">        [<span class="keyword">self</span>.mpC play];</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//2. 保证是录制视频 (如果是选中了视频, 说明视频已经存在了. 如果你在保存, 就重复了)</span></div><div class="line">        <span class="comment">//说明现在是录制视频</span></div><div class="line">        <span class="keyword">if</span> (picker.sourceType == <span class="built_in">UIImagePickerControllerSourceTypeCamera</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">//3. 保存</span></div><div class="line">            ALAssetsLibrary *al = [ALAssetsLibrary new];</div><div class="line"></div><div class="line">            <span class="comment">//保存视频到系统的默认相册中 --&gt; 只需要传入要保存的视频的URL地址即可</span></div><div class="line">            [al writeVideoAtPathToSavedPhotosAlbum:info[<span class="built_in">UIImagePickerControllerMediaURL</span>] completionBlock:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//一旦实现了代理方法, 那么picker需要手动消失</span></div><div class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;MobileCoreServices/MobileCoreServices.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UINavigationControllerDelegate</span>, <span class="title">UIImagePickerControllerDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)chooseVideoClick:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     enum &#123;</div><div class="line">     UIImagePickerControllerSourceTypePhotoLibrary ,//来自图库</div><div class="line">     UIImagePickerControllerSourceTypeCamera ,//来自相机</div><div class="line">     UIImagePickerControllerSourceTypeSavedPhotosAlbum //来自相册</div><div class="line">     &#125;;</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (![<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">UIImagePickerController</span> *picker = [<span class="built_in">UIImagePickerController</span> new];</div><div class="line"></div><div class="line">    <span class="comment">//可以控制是选择(PhotoLibrary)/拍摄(Camera)</span></div><div class="line">    picker.sourceType = <span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>;</div><div class="line"></div><div class="line">    <span class="comment">//可以控制是照片(kUTTypeImage)/视频(kUTTypeMovie)</span></div><div class="line">    picker.mediaTypes = @[(<span class="built_in">NSString</span> *)kUTTypeMovie];</div><div class="line"></div><div class="line">    picker.delegate = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> presentViewController:picker animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 代理方法 --&gt; 获取视频的URL地址, 并进行压缩</span></div><div class="line">- (<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)info</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"info: %@"</span>,info);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     UIImagePickerControllerMediaURL = "file:///private/var/mobile/Containers/Data/Application/F7867122-B08D-46E9-86DD-09EC7BEF7208/tmp/trim.EF7DA639-689D-4C56-A12B-8DE97CC226C2.MOV";</div><div class="line">     UIImagePickerControllerReferenceURL = "assets-library://asset/asset.MOV?id=E00E435A-84F3-45CC-8604-D4981B1C89EB&amp;ext=MOV";</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">//转换视频</span></div><div class="line">    [<span class="keyword">self</span> <span class="keyword">export</span>:info[<span class="built_in">UIImagePickerControllerMediaURL</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 视频压缩代码 转换视频</span></div><div class="line">- (<span class="keyword">void</span>)<span class="keyword">export</span>:(<span class="built_in">NSURL</span> *)url</div><div class="line">&#123;</div><div class="line">    <span class="comment">//1. 创建资源类</span></div><div class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:url];</div><div class="line"></div><div class="line">    <span class="comment">//2. 创建资源转换会话类</span></div><div class="line">    <span class="comment">//presetName: 设置分辨率和质量  可以选择低或中质量</span></div><div class="line">    <span class="built_in">AVAssetExportSession</span> *exportSession = [<span class="built_in">AVAssetExportSession</span> exportSessionWithAsset:asset presetName:<span class="built_in">AVAssetExportPresetLowQuality</span>];</div><div class="line"></div><div class="line">    <span class="comment">//3. 转换的路径 从沙盒中指定路径 --&gt; 变成NSURL</span></div><div class="line">    <span class="comment">//文件重名, 不会默认覆盖</span></div><div class="line">    <span class="comment">//temp://video/abc.mp4</span></div><div class="line">    exportSession.outputURL = [<span class="built_in">NSURL</span> fileURLWithPath: [<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingPathComponent:<span class="string">@"2.mp4"</span>]];</div><div class="line"></div><div class="line">    <span class="comment">//4. 转换的格式</span></div><div class="line">    exportSession.outputFileType = <span class="built_in">AVFileTypeMPEG4</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     "com.apple.quicktime-movie"  --&gt; AVFileTypeQuickTimeMovie</div><div class="line">     "public.mpeg-4"    --&gt; AVFileTypeMPEG4</div><div class="line">     */</div><div class="line">    <span class="comment">//NSLog(@"session: %@", exportSession.supportedFileTypes);</span></div><div class="line"></div><div class="line">    <span class="comment">//5. 转换方法 , 转成功, 会调用里面的block</span></div><div class="line">    [exportSession exportAsynchronouslyWithCompletionHandler:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"转换成功"</span>);</div><div class="line">        <span class="comment">//在这里执行发送视频的代码</span></div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[传感器：加速计,陀螺仪,磁力计 push获取方式]]></title>
      <url>http://whong7.github.io/2015/06/28/%E4%BC%A0%E6%84%9F%E5%99%A8%EF%BC%9A%E5%8A%A0%E9%80%9F%E8%AE%A1,%E9%99%80%E8%9E%BA%E4%BB%AA,%E7%A3%81%E5%8A%9B%E8%AE%A1%20push%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="传感器：加速计-陀螺仪-磁力计-push获取方式"><a href="#传感器：加速计-陀螺仪-磁力计-push获取方式" class="headerlink" title="传感器：加速计,陀螺仪,磁力计 push获取方式"></a>传感器：加速计,陀螺仪,磁力计 push获取方式</h2><ul>
<li>获取方式分为2种: push(系统会按照一定的时间间隔, 不停的返回数据) / pull (在需要的时候再来获取数据)</li>
</ul>
<h3 id="加速计"><a href="#加速计" class="headerlink" title="加速计:"></a>加速计:</h3><ul>
<li>检测力在某个方向上有作用 (检测到方向和大小) –&gt; 沿着轴上下快速运动</li>
<li>加速度计的原理很简单，现在手机里面基本配备的都是3维线传感器，也就是说，用来测量x，y，z三个轴上的加速力。加速力就是当物体在加速过程中作用在物体上的力，就好比地球引力，也就是重力。</li>
<li>可以用于监测设备的摇晃</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)accelerometerPush &#123;</div><div class="line">    <span class="comment">//加速器push (频繁获取数据)</span></div><div class="line">    <span class="comment">//Accelerometer</span></div><div class="line">    <span class="comment">//1. 创建运动管理器</span></div><div class="line">    <span class="keyword">self</span>.motionMgr = [<span class="built_in">CMMotionManager</span> new];</div><div class="line"></div><div class="line">    <span class="comment">//2. 判断能否使用加速计</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.motionMgr isAccelerometerAvailable]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3. 设置采样间隔(更新间隔/推送间隔) --&gt; push方式才需要设置</span></div><div class="line">    <span class="comment">//单位是秒</span></div><div class="line">    <span class="keyword">self</span>.motionMgr.accelerometerUpdateInterval = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//4. 开始更新 --&gt; 如果是push方式, 那么使用带有bolck的方法</span></div><div class="line">    [<span class="keyword">self</span>.motionMgr startAccelerometerUpdatesToQueue:[<span class="built_in">NSOperationQueue</span> mainQueue] withHandler:^(<span class="built_in">CMAccelerometerData</span> * _Nullable accelerometerData, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         1. 哪个轴方向指向地面方向, 就会打印哪个轴方向的值.</div><div class="line">         2. 默认的大小 1~-1之间</div><div class="line">         3. 沿着轴方向运动, 会改变大小</div><div class="line"></div><div class="line">         如果要实现摇一摇, 可以判断三个轴的任何一个, 只要大于某个数值, 就可以判定发生了摇一摇</div><div class="line">         */</div><div class="line">        <span class="built_in">CMAcceleration</span> acceleration = accelerometerData.acceleration;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"x: %f, y: %f, z: %f "</span>, acceleration.x, acceleration.y, acceleration.z);</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="陀螺仪-检测转动的角速度-–-gt-只有转动才会有值"><a href="#陀螺仪-检测转动的角速度-–-gt-只有转动才会有值" class="headerlink" title="陀螺仪: 检测转动的角速度  –&gt; 只有转动才会有值"></a>陀螺仪: 检测转动的角速度  –&gt; 只有转动才会有值</h3><ul>
<li><p>陀螺仪原理是指陀螺仪工作的原理，螺旋仪是一种用来传感与维持方向的装置，基于角动量守恒的理论设计出来的。陀螺仪主要是由一个位于轴心且可旋转的转子构成。 陀螺仪一旦开始旋转，由于转子的角动量，陀螺仪有抗拒方向改变的趋向。</p>
</li>
<li><p>现象解释[百度百科]</p>
<ul>
<li>高速旋转的物体的旋转轴，对于改变其方向的外力作用有趋向于垂直方向的倾向。而且，旋转物体在横向倾斜时，重力会向增加倾斜的方向作用，而轴则向垂直方向运动，就产生了摇头的运动（岁差运动）。当陀螺经纬仪的陀螺旋转轴以水平轴旋转时，由于地球的旋转而受到铅直方向旋转力，陀螺的旋转体向水平面内的子午线方向产生岁差运动。当轴平行于子午线而静止时可加以应用。</li>
<li>陀螺仪基本上就是运用物体高速旋转时，角动量很大，旋转轴会一直稳定指向一个方向的性质，所制造出来的定向仪器。不过它必需转得够快，或者惯量够大(也可以说是角动量要够大)。不然，只要一个很小的力矩，就会严重影响到它的稳定性。</li>
</ul>
</li>
</ul>
<p> <img src="http://g.hiphotos.baidu.com/baike/s%3D220/sign=4f93e8cb75094b36df921cef93cc7c00/0823dd54564e9258af3790fa9f82d158ccbf4ea6.jpg" alt=""></p>
<ul>
<li>陀螺仪的测量是随时间累计的，要知道当前的角度，只需要将之前所有的输出数值积分即可。当然，陀螺仪只会输出当前旋转的变化值，比如说，如果一架飞机是以60度的倾斜角度径直飞行，此时陀螺仪的输出为0，因为当前就没有机体旋转。但是，你可以通过之前的输出累计计算出当前机体倾斜角度是多少。<br><img src="http://ww3.sinaimg.cn/large/9632d3f5jw1f91hzfgwxfj20a00bjaaq.jpg" alt=""></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)gyroPush</div><div class="line">&#123;</div><div class="line">    <span class="comment">//陀螺仪push (频繁获取数据)</span></div><div class="line">    <span class="comment">//Gyro</span></div><div class="line">    <span class="comment">//1. 创建运动管理器</span></div><div class="line">    <span class="keyword">self</span>.motionMgr = [<span class="built_in">CMMotionManager</span> new];</div><div class="line"></div><div class="line">    <span class="comment">//2. 判断能否使用陀螺仪</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.motionMgr isGyroAvailable]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3. 设置采样间隔(更新间隔/推送间隔) --&gt; push方式才需要设置</span></div><div class="line">    <span class="comment">//单位是秒</span></div><div class="line">    <span class="keyword">self</span>.motionMgr.gyroUpdateInterval = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//4. 开始更新 --&gt; 如果是push方式, 那么使用带有bolck的方法</span></div><div class="line">    [<span class="keyword">self</span>.motionMgr startGyroUpdatesToQueue:[<span class="built_in">NSOperationQueue</span> mainQueue] withHandler:^(<span class="built_in">CMGyroData</span> * _Nullable gyroData, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">CMRotationRate</span> rotationRate = gyroData.rotationRate;</div><div class="line"></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"x: %f, y: %f, z: %f "</span>, rotationRate.x, rotationRate.y, rotationRate.z);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="磁力计-检测磁场的变化-–-gt-主要用于导航"><a href="#磁力计-检测磁场的变化-–-gt-主要用于导航" class="headerlink" title="磁力计: 检测磁场的变化  –&gt; 主要用于导航"></a>磁力计: 检测磁场的变化  –&gt; 主要用于导航</h3><ul>
<li>感应周边磁场，盒盖锁屏</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)gyroPush</div><div class="line">&#123;</div><div class="line">-(<span class="keyword">void</span>)magnetometerPush&#123;</div><div class="line"></div><div class="line">    <span class="comment">//磁力计push (频繁获取数据)</span></div><div class="line">    <span class="comment">//Magnetometer</span></div><div class="line">    <span class="comment">//1. 创建运动管理器</span></div><div class="line">    <span class="keyword">self</span>.motionMgr = [<span class="built_in">CMMotionManager</span> new];</div><div class="line"></div><div class="line">    <span class="comment">//2. 判断能否使用磁力计</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.motionMgr isMagnetometerAvailable]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3. 设置采样间隔(更新间隔/推送间隔) --&gt; push方式才需要设置</span></div><div class="line">    <span class="comment">//单位是秒</span></div><div class="line">    <span class="keyword">self</span>.motionMgr.magnetometerUpdateInterval = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//4. 开始更新 --&gt; 如果是push方式, 那么使用带有bolck的方法</span></div><div class="line">    [<span class="keyword">self</span>.motionMgr startMagnetometerUpdatesToQueue:[<span class="built_in">NSOperationQueue</span> mainQueue] withHandler:^(<span class="built_in">CMMagnetometerData</span> * _Nullable magnetometerData, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//单位: 特斯拉</span></div><div class="line">        <span class="built_in">CMMagneticField</span> magneticField = magnetometerData.magneticField;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"x: %f, y: %f, z: %f "</span>, magneticField.x, magneticField.y, magneticField.z);</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[传感器：加速计,陀螺仪,磁力计 pull获取方式]]></title>
      <url>http://whong7.github.io/2015/06/27/%E4%BC%A0%E6%84%9F%E5%99%A8%EF%BC%9A%E5%8A%A0%E9%80%9F%E8%AE%A1,%E9%99%80%E8%9E%BA%E4%BB%AA,%E7%A3%81%E5%8A%9B%E8%AE%A1%20pull%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="传感器：加速计-陀螺仪-磁力计-pull获取方式"><a href="#传感器：加速计-陀螺仪-磁力计-pull获取方式" class="headerlink" title="传感器：加速计,陀螺仪,磁力计 pull获取方式"></a>传感器：加速计,陀螺仪,磁力计 pull获取方式</h2><ul>
<li>获取方式分为2种: push(系统会按照一定的时间间隔, 不停的返回数据) / pull (在需要的时候再来获取数据)</li>
</ul>
<ul>
<li>陀螺仪,磁力计操作方法类似</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CoreMotion/CoreMotion.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="comment">//运动管理器</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CMMotionManager</span> *motionMgr;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     加速计: 检测力在某个方向上有作用 (检测到方向和大小) --&gt; 沿着轴上下快速运动</div><div class="line"></div><div class="line">    </div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">//加速器pull (在需要的时候再来获取数据)</span></div><div class="line">    <span class="comment">//Accelerometer</span></div><div class="line">    <span class="comment">//1. 创建运动管理器</span></div><div class="line">    <span class="keyword">self</span>.motionMgr = [<span class="built_in">CMMotionManager</span> new];</div><div class="line"></div><div class="line">    <span class="comment">//2. 判断能否使用加速计</span></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.motionMgr isAccelerometerAvailable]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3. 开始更新</span></div><div class="line">    [<span class="keyword">self</span>.motionMgr startAccelerometerUpdates];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 点击屏幕获取数组</span></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="comment">//加速计 / 陀螺仪 / 磁力计, 在开始更新数据之后, 都会讲获取的数据, 保存到对应的属性中. 可以从属性中直接获取想要的数据</span></div><div class="line"></div><div class="line">    <span class="comment">//加速</span></div><div class="line">    <span class="built_in">CMAcceleration</span> acceleration = <span class="keyword">self</span>.motionMgr.accelerometerData.acceleration;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"x: %f, y: %f, z: %f "</span>, acceleration.x, acceleration.y, acceleration.z);</div><div class="line"></div><div class="line"><span class="comment">//    CMRotationRate rotationRate = self.motionMgr.gyroData.rotationRate;</span></div><div class="line"><span class="comment">//    NSLog(@"x: %f, y: %f, z: %f ", rotationRate.x, rotationRate.y, rotationRate.z);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[控制器创建方式]]></title>
      <url>http://whong7.github.io/2014/12/27/1.%E6%8E%A7%E5%88%B6%E5%99%A8%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="控制器的三种创建方式-代码"><a href="#控制器的三种创建方式-代码" class="headerlink" title="控制器的三种创建方式-代码"></a>控制器的三种创建方式-代码</h3><ul>
<li>直接alloc init</li>
</ul>
<h3 id="控制器的三种创建方式-sb"><a href="#控制器的三种创建方式-sb" class="headerlink" title="控制器的三种创建方式-sb"></a>控制器的三种创建方式-sb</h3><ul>
<li>首先都要获取 sb 对象</li>
<li>两种方式:<ul>
<li>获取箭头所指向的控制器<ul>
<li>(不带参数的)</li>
</ul>
</li>
<li>获取指定sbID的控制器<ul>
<li>(带参数的)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="控制器的三种创建方式-xib"><a href="#控制器的三种创建方式-xib" class="headerlink" title="控制器的三种创建方式-xib"></a>控制器的三种创建方式-xib</h3><ul>
<li>三种:<ul>
<li>指定xib的名字 (创建控制器的时候的init的方法)</li>
<li>同名xib</li>
<li>同名去掉Controller的xib</li>
</ul>
</li>
<li>注意:<ul>
<li>xib的filesOwner为类名</li>
<li>view要记得连线     </li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="用-XIB-加载控制器的细节"><a href="#用-XIB-加载控制器的细节" class="headerlink" title="用 XIB 加载控制器的细节"></a>用 XIB 加载控制器的细节</h3><ul>
<li>优先级:<ul>
<li>如果指定的xib的名字,回去加载执行的xib</li>
<li>如果没有指定xib的名字<ul>
<li>如果有同名的xib,会去加载同名的xib</li>
<li>如果没有同名的xib<ul>
<li>如果有同名去掉Controller的xib,会去加载同名去掉Controller的xib</li>
<li>如果没有同名去掉Controller的xib,会创建一个空白的控制器        </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>代码示例</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">AppDelegate.m</div><div class="line"></div><div class="line">	- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span>*)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span>*)launchOptions</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</div><div class="line"></div><div class="line"><span class="comment">// 1. 代码</span></div><div class="line">        TestViewController* vc = [[TestViewController alloc] init];</div><div class="line"></div><div class="line"><span class="comment">// 2.通过sb加载控制器</span></div><div class="line"></div><div class="line"><span class="number">2.1</span> 加载箭头所指向的控制器</div><div class="line">    <span class="comment">// 2.1.1 获取sb对象</span></div><div class="line">        <span class="built_in">UIStoryboard</span>* sb = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Test"</span> bundle:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 2.1.2 加载箭头所指向的控制器</span></div><div class="line">        TestViewController* vc = sb.instantiateInitialViewController;</div><div class="line"><span class="number">2.2</span> 加载一个带sbID的控制器</div><div class="line">    <span class="comment">// 2.2.1 获取sb对象</span></div><div class="line">        <span class="built_in">UIStoryboard</span>* sb = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Test"</span> bundle:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 2.2.2 加载一个带sbID的控制器</span></div><div class="line">        TestViewController* vc = [sb instantiateViewControllerWithIdentifier:<span class="string">@"test"</span>];</div><div class="line"></div><div class="line"><span class="comment">// 3.通过xib的形式加载控制器 (同名的xib优先级会比同名去掉Controller的要高!!!)</span></div><div class="line"></div><div class="line">  <span class="comment">// 3.1 指定xib名称</span></div><div class="line">    OneViewController* vc = [[OneViewController alloc] initWithNibName:<span class="string">@"Testtt"</span> bundle:<span class="literal">nil</span>];</div><div class="line">  <span class="comment">// 3.2 通过init的方法创建 (同名的xib)</span></div><div class="line">    <span class="comment">// 当调用init方法创建的时候 系统会尝试加载同名的xib</span></div><div class="line">        OneViewController* vc = [[OneViewController alloc] init];</div><div class="line"></div><div class="line"><span class="comment">// 3.3 通过init的方法创建 (同名去掉Controller的xib)</span></div><div class="line">    <span class="comment">// 当调用init方法创建的时候 系统会尝试加载同名去掉Controller的xib</span></div><div class="line">        OneViewController* vc = [[OneViewController alloc] init];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.window.rootViewController = vc;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图像绘制]]></title>
      <url>http://whong7.github.io/2014/12/22/%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="Quartz2D-Core-Graphics介绍"><a href="#Quartz2D-Core-Graphics介绍" class="headerlink" title="Quartz2D/Core Graphics介绍"></a>Quartz2D/Core Graphics介绍</h2><ul>
<li>Quartz2D的API是哪个语言的?<ul>
<li>c语言 </li>
</ul>
</li>
<li>Quartz2D的API来自于哪个框架?<ul>
<li>Core Graphics</li>
</ul>
</li>
<li>Quartz2D可以做什么?<ul>
<li>饼状图,柱状图,折线图</li>
<li>自定义控件</li>
</ul>
</li>
<li>Quartz2D 支持 iOS 开发, mac 开发, 跨平台</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/mw690/9632d3f5jw1f8wu4uorx2j20if0km75x.jpg" alt=""></p>
<a id="more"></a>
<h2 id="图形上下文介绍"><a href="#图形上下文介绍" class="headerlink" title="图形上下文介绍"></a>图形上下文介绍</h2><ul>
<li>图形上下文也叫做绘图上下文</li>
<li>图形上下文的类型?<ul>
<li>CGContextRef</li>
</ul>
</li>
<li>图形上下文包含的主要信息?<ul>
<li>路径(圆,方,线条)</li>
<li>状态(红色,多宽)</li>
<li>输出目标(在哪显示)</li>
</ul>
</li>
</ul>
<h2 id="绘图的步骤-方式-静态分析工具"><a href="#绘图的步骤-方式-静态分析工具" class="headerlink" title="绘图的步骤/方式/静态分析工具"></a>绘图的步骤/方式/静态分析工具</h2><ul>
<li>绘图的步骤有哪些?<ul>
<li>获取当前上下文</li>
<li>拼接路径 同时 把路径添加到上下文当中</li>
<li>渲染 </li>
</ul>
</li>
<li>静态分析工具的作用?<ul>
<li>不仅能够检测内存泄漏的问题,还能检测其他的问题. </li>
<li>这个工具仅仅是静态的在分析内存的问题,并不能真正的检测内存泄漏的问题.</li>
</ul>
</li>
<li>如何释放路径?<ul>
<li>CGPathRelease(path);</li>
<li>CFRelease(path);</li>
</ul>
</li>
<li>ARC仅仅是处理oc的引用计数的问题</li>
<li>在c中如果看到了create/copy/retain,一般都需要释放    </li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 步骤和方式</span></div><div class="line">- (<span class="keyword">void</span>)test1</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 绘图的步骤</span></div><div class="line"></div><div class="line"><span class="comment">// 方式1</span></div><div class="line"></div><div class="line">        <span class="comment">// 1.获取当前图形上下文</span></div><div class="line">        <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">        <span class="comment">// 2.拼接路径 同时 把路径添加到上下文当中</span></div><div class="line">        <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 起点</span></div><div class="line">        <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">200</span>); <span class="comment">// 终点</span></div><div class="line"></div><div class="line">        <span class="comment">// 3.渲染(显示)</span></div><div class="line">        <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line"><span class="comment">// 方式2</span></div><div class="line"></div><div class="line">    <span class="comment">// 1.获取当前图形上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 2.拼接路径</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGPathAddLineToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 3.把路径添加到上下文当中</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path);</div><div class="line"></div><div class="line">    <span class="comment">// 4.渲染(显示)</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line">    <span class="comment">//    // 释放</span></div><div class="line">    <span class="built_in">CGPathRelease</span>(path);</div><div class="line">    <span class="comment">//    CFRelease(path);//可以释放所有Core foundation对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="绘图实例"><a href="#绘图实例" class="headerlink" title="绘图实例"></a>绘图实例</h2><ul>
<li>矩形<ul>
<li>addRect</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 矩形</span></div><div class="line"></div><div class="line">    <span class="comment">// 获取上下文 uijjcc:</span></div><div class="line"></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 拼接路径 同时 添加到上下文当中</span></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 渲染</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>椭圆<ul>
<li>addEllipse</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 椭圆</span></div><div class="line"></div><div class="line">   <span class="comment">// 获取上下文</span></div><div class="line">   <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">   <span class="comment">// 路径</span></div><div class="line">   <span class="built_in">CGContextAddEllipseInRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>));</div><div class="line"></div><div class="line">   <span class="comment">// 渲染</span></div><div class="line">   <span class="built_in">CGContextStrokePath</span>(ctx);</div></pre></td></tr></table></figure>
<ul>
<li>弧<ul>
<li>addArc</li>
</ul>
</li>
</ul>
<pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 弧</span></div><div class="line"></div><div class="line">   <span class="comment">// 上下文</span></div><div class="line">   <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">   </div><div class="line">   <span class="comment">// 路径</span></div><div class="line">   <span class="comment">// x , y 圆心</span></div><div class="line">   <span class="comment">// radius 半径</span></div><div class="line">   <span class="comment">// start 起始的位置</span></div><div class="line">   <span class="comment">// end 结束的位置</span></div><div class="line">   <span class="comment">// clockwise 是否是顺时针</span></div><div class="line">   <span class="built_in">CGContextAddArc</span>(ctx, <span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, M_PI_2, <span class="number">1</span>);</div><div class="line">   <span class="comment">// 渲染</span></div><div class="line">   <span class="built_in">CGContextStrokePath</span>(ctx);</div></pre></td></tr></table></figure>
</code></pre><p><img src="http://ww1.sinaimg.cn/mw690/9632d3f5jw1f8wukfpij9j211y0qm41n.jpg" alt=""></p>
<h2 id="绘图的样式"><a href="#绘图的样式" class="headerlink" title="绘图的样式"></a>绘图的样式</h2><ul>
<li>线宽?<ul>
<li>CGContextSetLineWidth </li>
</ul>
</li>
<li>头尾样式?<ul>
<li>CGContextSetLineCap</li>
</ul>
</li>
<li>连接处样式?<ul>
<li>CGContextSetLineJoin </li>
</ul>
</li>
<li>虚线?<ul>
<li>CGContextSetLineDash </li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 画线</span></div><div class="line"></div><div class="line">    <span class="comment">// 上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 路径</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">50</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">250</span>, <span class="number">100</span>);</div><div class="line">    <span class="comment">//    CGContextAddLineToPoint(ctx, 200, 200);</span></div><div class="line"></div><div class="line"><span class="comment">// 设置线宽</span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">100</span>);<span class="comment">//对上下文所有的东西进行操作，渲染的时候起作用</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 设置头尾样式</span></div><div class="line">    <span class="built_in">CGContextSetLineCap</span>(ctx, kCGLineCapSquare);</div><div class="line">    <span class="comment">//    kCGLineCapButt, // 默认</span></div><div class="line">    <span class="comment">//    kCGLineCapRound, // 圆角</span></div><div class="line">    <span class="comment">//    kCGLineCapSquare // 方的,两头会加宽度的一半</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 设置连接处的样式</span></div><div class="line">    <span class="built_in">CGContextSetLineJoin</span>(ctx, kCGLineJoinBevel);</div><div class="line">    <span class="comment">//    kCGLineJoinMiter, // 默认</span></div><div class="line">    <span class="comment">//    kCGLineJoinRound, // 圆角</span></div><div class="line">    <span class="comment">//    kCGLineJoinBevel // 切角</span></div><div class="line"></div><div class="line"><span class="comment">// 虚线</span></div><div class="line">    <span class="comment">// phase 阶段 通常传0</span></div><div class="line">    <span class="comment">// lengths 数组</span></div><div class="line">    <span class="comment">// count 数组长度</span></div><div class="line"></div><div class="line">    <span class="comment">//     CGFloat lengths[] = &#123; 10, 20 &#125;;</span></div><div class="line">    <span class="comment">// 长度 10 间距20</span></div><div class="line"></div><div class="line">    <span class="comment">//   CGFloat lengths[] = &#123; 10, 20, 30 &#125;;</span></div><div class="line">    <span class="comment">// 长度 10  间距 20  长度 30  间距10  长度 20  间距30   长度 10  间距 20</span></div><div class="line"></div><div class="line">    <span class="built_in">CGFloat</span> lengths[] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;;</div><div class="line">    <span class="built_in">CGContextSetLineDash</span>(ctx, <span class="number">30</span>, lengths, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 渲染</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="渲染的方式-绘图的颜色"><a href="#渲染的方式-绘图的颜色" class="headerlink" title="渲染的方式/绘图的颜色"></a>渲染的方式/绘图的颜色</h2><ul>
<li>关闭路径?<ul>
<li>CGContextClosePath(ctx); // 从当前的位置 连线 到初始的位置 </li>
</ul>
</li>
<li>描边?<ul>
<li>stork</li>
</ul>
</li>
<li>填充?<ul>
<li>fill</li>
</ul>
</li>
<li>color对象的 set/setFill/setStrok 区别?<ul>
<li>setFill 仅仅是设置填充的颜色</li>
<li>setStrok 仅仅是设置描边的颜色</li>
<li>set 两个都设置</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 渲染的方法</span></div><div class="line">- (<span class="keyword">void</span>)test6</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 三角形</span></div><div class="line"></div><div class="line">    <span class="comment">// 上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 路径</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">150</span>, <span class="number">200</span>);</div><div class="line">    <span class="built_in">CGContextClosePath</span>(ctx); <span class="comment">// 从当前的位置 连线 到初始的位置</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置颜色oc</span></div><div class="line">    [[<span class="built_in">UIColor</span> redColor] setFill];<span class="comment">//填充颜色</span></div><div class="line"></div><div class="line">    [[<span class="built_in">UIColor</span> whiteColor] set];<span class="comment">//线的颜色</span></div><div class="line"></div><div class="line">    [[<span class="built_in">UIColor</span> blueColor] setStroke];<span class="comment">//对两者都进行设定</span></div><div class="line">    <span class="comment">// 渲染</span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(ctx, kCGPathFillStroke);<span class="comment">//对  填充和描边  进行渲染</span></div><div class="line">    <span class="comment">//    CGContextFillPath(ctx);</span></div><div class="line"></div><div class="line">    <span class="comment">// CGContextDrawPath(ctx, kCGPathStroke); &lt;==&gt; CGContextStrokePath(ctx);</span></div><div class="line">    <span class="comment">// CGContextDrawPath(ctx, kCGPathFill); &lt;==&gt; CGContextFillPath(ctx);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="补充-不同样式的线"><a href="#补充-不同样式的线" class="headerlink" title="补充-不同样式的线"></a>补充-不同样式的线</h2><ul>
<li>如果想要出现不同样式的线<ul>
<li>需要渲染多次</li>
</ul>
</li>
<li>渲染的过程,仅仅是把路径信息,渲染上去.这个时候,当前上下文还在,路径信息,如果被渲染以后,就没有了.但是,状态信息和目标信息都还在    </li>
</ul>
<p><strong>两条线  一条粗，一条细</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不同样式的线</span></div><div class="line">- (<span class="keyword">void</span>)test7</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">25</span>);</div><div class="line">    <span class="comment">// 路径</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">100</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 渲染：渲染的过程，是把当前所有的东西全都剪切到UIView。</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line">        <span class="comment">//从新设定上下文</span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">20</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="奇偶填充规则"><a href="#奇偶填充规则" class="headerlink" title="奇偶填充规则"></a>奇偶填充规则</h2><ul>
<li>even odd</li>
<li>不是默认的填充规则,如果需要使用需要调用 EOFill</li>
<li>奇填偶不填</li>
</ul>
<p><strong>参考代码:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 奇偶填充规则</span></div><div class="line">-(<span class="keyword">void</span>)test8</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGContextAddArc</span>(ctx, <span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * M_PI, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">120</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">250</span>));</div><div class="line"></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(ctx, kCGPathEOFill);<span class="comment">//eo：奇偶--奇填偶不填，如果只是kCGPathFill：就是一坨黑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非零环绕数规则"><a href="#非零环绕数规则" class="headerlink" title="非零环绕数规则"></a>非零环绕数规则</h2><ul>
<li>如果是从右往左 +1</li>
<li>如果是从左往右 -1</li>
<li>如果最终结果不为0 那么填充</li>
<li>非零环绕数是默认的填充规则</li>
</ul>
<p><strong>参考代码:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Drawing code</span></div><div class="line"></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGMutablePathRef</span> path1 = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGMutablePathRef</span> path2 = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGPathAddArc</span>(path1, <span class="literal">NULL</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * M_PI, <span class="number">1</span>);</div><div class="line">    <span class="built_in">CGPathAddArc</span>(path2, <span class="literal">NULL</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">2</span> * M_PI, <span class="number">0</span>);</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path1);</div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path2);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextFillPath</span>(ctx);</div><div class="line"></div><div class="line">    <span class="built_in">CGPathRelease</span>(path1);</div><div class="line">    <span class="built_in">CGPathRelease</span>(path2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于drawRect"><a href="#关于drawRect" class="headerlink" title="关于drawRect"></a>关于drawRect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//- 为什么要把代码写在drawRect当中?</div><div class="line">// 因为这个方法可以获取到正确的上下文</div><div class="line"></div><div class="line">//- drawrect方法中rect参数的含义是什么?</div><div class="line">// 当前view的bounds</div><div class="line"></div><div class="line">//- drawrect什么时候调用?</div><div class="line">// 这个方法是系统自动调用,不要手动调用</div><div class="line">// 1.当这个view第一次显示的时候会调用</div><div class="line">// 2.当重绘的时候会调用</div><div class="line"></div><div class="line">//- 如何重绘?</div><div class="line">// 1.调用需要重绘的对象的 setNeedsDisplay</div><div class="line">// 2.调用需要重绘的对象的 setNeedsDisplayInRect</div></pre></td></tr></table></figure>
<h2 id="UIKit绘制图形-lt-oc-gt"><a href="#UIKit绘制图形-lt-oc-gt" class="headerlink" title="UIKit绘制图形 &lt;oc&gt;"></a>UIKit绘制图形 <code>&lt;oc&gt;</code></h2><p><strong>画一条线</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">//Crawing code</span></div><div class="line"></div><div class="line"><span class="comment">//1.path对象</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [[<span class="built_in">UIBezierPath</span> alloc]init];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//2.路径</span></div><div class="line">    <span class="comment">//线</span></div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>)];</div><div class="line"></div><div class="line"><span class="comment">//3.渲染</span></div><div class="line">    [path stroke];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>矩形<ul>
<li>bezierPathWithRect </li>
</ul>
</li>
<li>椭圆<ul>
<li>bezierPathWithOvalInRect     </li>
</ul>
</li>
<li>圆角矩形<ul>
<li>bezierPathWithRoundedRect</li>
<li>圆角矩形 超过了半径的三分之二 会变成一个圆</li>
</ul>
</li>
<li>圆<ul>
<li>bezierPathWithArcCenter </li>
</ul>
</li>
<li>c 和 oc 的区别?<ul>
<li>Quartz2d是C的api</li>
<li>c的功能比oc的强大</li>
<li>oc仅仅是封装了一部分c的api</li>
<li>从代码量上来说 oc比c 简单</li>
<li>一般情况,工作中用oc.如果oc实现不了的功能用c</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">//Crawing code</span></div><div class="line"></div><div class="line"><span class="comment">//1.矩形</span></div><div class="line"></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">    [path stroke];</div><div class="line"></div><div class="line"><span class="comment">//2.椭圆</span></div><div class="line"></div><div class="line">    <span class="built_in">UIBezierPath</span> *path1 = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">    [path1 stroke];</div><div class="line"></div><div class="line"><span class="comment">//3.圆角矩形</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>) cornerRadius:<span class="number">30</span>];<span class="comment">//50正好，超过了半径的2/3的话 会变成一个圆</span></div><div class="line">    [path2 stroke];</div><div class="line"></div><div class="line"><span class="comment">//4.弧</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path3 = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>) radius:<span class="number">100</span> startAngle:<span class="number">0</span> endAngle:M_PI_2 clockwise:<span class="number">1</span>];</div><div class="line">    [path3 stroke];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="oc和c混用"><a href="#oc和c混用" class="headerlink" title="oc和c混用"></a>oc和c混用</h2><ul>
<li>c和oc可以混用</li>
<li>c如何转成oc的path<ul>
<li>通过类方法 传入 CGPath</li>
</ul>
</li>
<li>oc如何转成c的path<ul>
<li>直接通过ocPath的.CGPath即可 </li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">   <span class="comment">//1.c方法</span></div><div class="line"></div><div class="line">    <span class="comment">//上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="comment">//路径</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGPathAddLineToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="comment">//oc路径</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *ocPath = [<span class="built_in">UIBezierPath</span> bezierPathWithCGPath:path];</div><div class="line"></div><div class="line">    [ocPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">100</span>)];</div><div class="line"></div><div class="line"><span class="comment">//    [ocPath stroke];//oc显示</span></div><div class="line"></div><div class="line"><span class="comment">//   将oc转化成c的path并添加到上下文</span></div><div class="line">     <span class="comment">//CGContextAddPath(ctx, path);</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, ocPath.CGPath);</div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line">    <span class="comment">//释放c的路径</span></div><div class="line">    <span class="built_in">CGPathRelease</span>(path);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIKit绘制字符串"><a href="#UIKit绘制字符串" class="headerlink" title="UIKit绘制字符串"></a>UIKit绘制字符串</h2><ul>
<li>drawInRect?<ul>
<li>drawInRect 绘制到指定的区域</li>
</ul>
</li>
<li>drawAtPoint?<ul>
<li>// drawAtPoint 从某个点开始画</li>
</ul>
</li>
<li>NSShadow</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">  <span class="comment">//绘制字符串</span></div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"我是whong7"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//创建影子</span></div><div class="line">    <span class="built_in">NSShadow</span> *s = [[<span class="built_in">NSShadow</span> alloc]init];</div><div class="line"></div><div class="line">    s.shadowOffset = <span class="built_in">CGSizeMake</span>(<span class="number">100</span>, <span class="number">100</span>);<span class="comment">//创建影子位置</span></div><div class="line">    s.shadowBlurRadius = <span class="number">0</span>;<span class="comment">//影子模糊程度，越大越模糊</span></div><div class="line">    s.shadowColor = [<span class="built_in">UIColor</span> yellowColor];<span class="comment">//影子的颜色</span></div><div class="line"></div><div class="line">    <span class="built_in">NSDictionary</span> *attr =</div><div class="line">  @&#123;</div><div class="line">    <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20</span>],<span class="comment">//字体大小</span></div><div class="line"><span class="comment">//    NSBackgroundColorAttributeName:[UIColor blueColor],//背景颜色,有背景就不显示影子字了</span></div><div class="line">    <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor],<span class="comment">//字体颜色</span></div><div class="line">    <span class="built_in">NSUnderlineStyleAttributeName</span>:@<span class="number">1</span>,</div><div class="line">    <span class="built_in">NSShadowAttributeName</span>:s</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//drawAtPoint 从某个点开始，不会自动换行</span></div><div class="line"><span class="comment">//    [str drawAtPoint:CGPointMake(0, 0) withAttributes:attr];</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//drawAtRect 区域内书写，会自动换行</span></div><div class="line">    [str drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>) withAttributes:attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIKit绘制图像"><a href="#UIKit绘制图像" class="headerlink" title="UIKit绘制图像"></a>UIKit绘制图像</h2><ul>
<li>drawInRect?<ul>
<li>拉伸到指定的区域, 小图会变大 大图会变小 </li>
</ul>
</li>
<li>drawAtPoint?<ul>
<li>从某一个点开始绘制 不变形 </li>
</ul>
</li>
<li>drawAsPatternInRect?<ul>
<li>平铺到某个区域 不变形 </li>
</ul>
</li>
<li>可以做水印相关的东西    </li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DemoView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DemoView</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line"><span class="comment">//绘制图片</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"me"</span>];</div><div class="line"></div><div class="line"><span class="comment">//从某一个点开始绘制</span></div><div class="line">    [image drawAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</div><div class="line"></div><div class="line"><span class="comment">//拉伸</span></div><div class="line">    [image drawInRect:rect];</div><div class="line"></div><div class="line"><span class="comment">//平铺</span></div><div class="line">    [image drawAsPatternInRect:rect];</div><div class="line"></div><div class="line"><span class="comment">//加水印</span></div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"水印"</span>;</div><div class="line">    [str drawAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>) withAttributes:@&#123; <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> whiteColor] &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="图像保存"><a href="#图像保存" class="headerlink" title="图像保存"></a>图像保存</h2><ul>
<li>UIImageWriteToSavedPhotosAlbum</li>
<li>参数分别为 保存的图片/回调target/回调方法/标记</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)save:(<span class="keyword">id</span>)sender &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//开启创建上下文 图片类型 的 图形上下文</span></div><div class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span>.DrawView.bounds.size);</div><div class="line"></div><div class="line">    <span class="comment">//获取上下文，不用获取就可以画</span></div><div class="line"><span class="comment">//    CGContextRef ctx = UIGraphicsGetCurrentContext();</span></div><div class="line"></div><div class="line">    <span class="comment">//把这个view 画到当前的上下文当中 并进行渲染</span></div><div class="line">    [<span class="keyword">self</span>.DrawView drawViewHierarchyInRect:<span class="keyword">self</span>.DrawView.bounds afterScreenUpdates:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">    <span class="comment">//获取图片</span></div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">//关闭</span></div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 保存相册 - 完成的是有一定要使用系统的方法</span></div><div class="line">    <span class="built_in">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class="string">@"123123123"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)image:(<span class="built_in">UIImage</span>*)image didFinishSavingWithError:(<span class="built_in">NSError</span>*)error contextInfo:(<span class="keyword">void</span>*)contextInfo</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"保存成功"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, contextInfo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="整体思维导图"><a href="#整体思维导图" class="headerlink" title="整体思维导图"></a>整体思维导图</h2><p><img src="http://ww3.sinaimg.cn/large/9632d3f5jw1f8xdug15y0j21kw1yaaxd.jpg" alt=""></p>
<p>高清思维导图下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNotePictures/绘图.png" target="_blank" rel="external">绘图.png</a></p>
<p>MindNode源文件下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNote/绘图.zip" target="_blank" rel="external">绘图.mindnode</a></p>
<h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul>
<li>微博：<a href="http://weibo.com/u/2519913461" target="_blank" rel="external">@whong77</a></li>
<li>邮箱：<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x77;&#x68;&#111;&#110;&#103;&#55;&#57;&#x31;&#49;&#50;&#x30;&#55;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#x6d;">&#x77;&#x68;&#111;&#110;&#103;&#55;&#57;&#x31;&#49;&#50;&#x30;&#55;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#x6d;</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[layer简介和基本属性]]></title>
      <url>http://whong7.github.io/2014/11/21/layer%E7%AE%80%E4%BB%8B%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>##layer简介和基本属性</p>
<ul>
<li>CALayer 是 UIView 的一部分</li>
<li>layer是负责显示的,view是负责处理事件的</li>
<li>layer在显示反面上 一定会比view强大</li>
<li><p>view之所有能够设置 frame color 相关的属性,本质上是在给这个view的layer进行设置</p>
<ul>
<li>边框</li>
<li>阴影</li>
<li>圆角</li>
<li>bounds</li>
<li>postion属性和view.center的关系</li>
<li>设置内容(图片)</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    <span class="built_in">UIView</span>* redView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    redView.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    redView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:redView];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.redView = redView;</div><div class="line"></div><div class="line">    <span class="comment">// 边框</span></div><div class="line">    redView.layer.borderWidth = <span class="number">10</span>;</div><div class="line">    redView.layer.borderColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</div><div class="line"></div><div class="line">    <span class="comment">// 阴影</span></div><div class="line">    redView.layer.shadowColor = [<span class="built_in">UIColor</span> yellowColor].CGColor;</div><div class="line">    <span class="comment">//    redView.layer.shadowOffset = CGSizeMake(100, 100);</span></div><div class="line">    redView.layer.shadowOpacity = <span class="number">1</span>; <span class="comment">// 设置layer的阴影一定要设置透明度</span></div><div class="line">    redView.layer.shadowRadius = <span class="number">50</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 咻一咻设置圆角</span></div><div class="line">    redView.layer.cornerRadius = <span class="number">50</span>;</div><div class="line">    redView.layer.masksToBounds = <span class="literal">YES</span>;</div><div class="line"></div><div class="line">    <span class="comment">// bounds 大小</span></div><div class="line">    redView.layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="comment">// position 位置(默认是中心点)</span></div><div class="line"><span class="comment">//        redView.layer.position = CGPointMake(0, 0);</span></div><div class="line"></div><div class="line">    <span class="comment">// 内容</span></div><div class="line">    <span class="comment">// 如果想把c转成oc的东西, 那么需要一个'桥接' 在桥接的后面 写上需要转化的类型</span></div><div class="line">      <span class="comment">//If you are using the layer to display a static image, you can set this property to the CGImageRef containing the image you want to display.</span></div><div class="line">        redView.layer.contents = (__bridge <span class="keyword">id</span>)([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"me"</span>].CGImage);</div><div class="line"></div><div class="line"><span class="comment">//    redView.layer.backgroundColor = [UIColor yellowColor].CGColor;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span>*&gt;*)touches withEvent:(<span class="built_in">UIEvent</span>*)event</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取手指的位置</span></div><div class="line">    <span class="built_in">CGPoint</span> p = [touches.anyObject locationInView:<span class="keyword">self</span>.view];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.redView.layer.position = p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[绘制柱状图、饼状图]]></title>
      <url>http://whong7.github.io/2014/11/15/%E7%BB%98%E5%88%B6%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E9%A5%BC%E7%8A%B6%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>##柱状图</p>
<ul>
<li><p>步骤:</p>
<ul>
<li>要有数据(数据就是柱子和高度的比例)</li>
<li>先写一个,最后把[0]改成i即可</li>
<li>技巧:计算frame的时候,先写宽高,因为很多时候 x和y 是根据旷告计算的</li>
<li>使用oc的方式,rect的方法,把xywh传入 然后渲染</li>
<li>最后,嵌套for循环.</li>
</ul>
</li>
<li><p>注意: setNeedsDisplayInRect 表示刷新指定的区域,但是,当这个方法调用的时候, drawRect方法的rect参数会跟着改变.所有,在drawRect方法中,尽量不要使用rect做参考.    </p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *data = @[@<span class="number">0.2</span>,@<span class="number">0.5</span>,@<span class="number">0.2</span>,@<span class="number">0.8</span>,@<span class="number">0.3</span>,@<span class="number">0.9</span>];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;data.count; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CGFloat</span> w = <span class="number">20</span>;</div><div class="line">        <span class="built_in">CGFloat</span> h = <span class="keyword">self</span>.bounds.size.height * [data[i] floatValue];</div><div class="line">        <span class="built_in">CGFloat</span> x = i*<span class="number">2</span>*w;</div><div class="line">        <span class="built_in">CGFloat</span> y = <span class="keyword">self</span>.bounds.size.height - h;</div><div class="line"></div><div class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(x, y, w, h)];</div><div class="line"></div><div class="line">        [[<span class="built_in">UIColor</span> randomColor]set];</div><div class="line"></div><div class="line">        [path fill];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="built_in">NSStringFromCGRect</span>(rect));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line"><span class="comment">//    [self setNeedsDisplay];</span></div><div class="line">    [<span class="keyword">self</span> setNeedsDisplayInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">400</span>)];<span class="comment">//会改变drawRect:(CGRect)rect</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>##饼图</p>
<ul>
<li>步骤:<ul>
<li>数组(扇形的比例)</li>
<li>如果想要画扇形,需要往圆心连线</li>
<li>每一次开始的位置,应该是上一次的结束的位置</li>
<li>每一次结束的位置,应该是在第二次的开始(上一次结束的位置) + 当前的弧的比例</li>
<li>嵌套for循环,渲染即可</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *data = @[@<span class="number">0.1</span>,@<span class="number">0.2</span>,@<span class="number">0.1</span>,@<span class="number">0.3</span>,@<span class="number">0.2</span>,@<span class="number">0.1</span>];</div><div class="line"></div><div class="line">    <span class="built_in">CGFloat</span> start = <span class="number">0</span>;</div><div class="line">    <span class="built_in">CGFloat</span> end = <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;data.count; i++)</div><div class="line">    &#123;</div><div class="line">         end = <span class="number">2</span>*M_PI*[data[i] floatValue]+start;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>) radius:<span class="number">100</span> startAngle:start endAngle:end clockwise:<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="comment">//扇形 记住圆心连线</span></div><div class="line">        [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>)];</div><div class="line"></div><div class="line">        [[<span class="built_in">UIColor</span> randomColor]set];</div><div class="line"></div><div class="line">        [path fill];</div><div class="line"></div><div class="line">        start = end;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="built_in">NSStringFromCGRect</span>(rect));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line"><span class="comment">//    [self setNeedsDisplay];</span></div><div class="line">    [<span class="keyword">self</span> setNeedsDisplayInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>,<span class="number">150</span>)];<span class="comment">//会改变drawRect:(CGRect)rect</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义进度条-扇形进度]]></title>
      <url>http://whong7.github.io/2014/11/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%9B%E5%BA%A6%E6%9D%A1-%E6%89%87%E5%BD%A2%E8%BF%9B%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>##自定义进度条-扇形进度</p>
<ul>
<li>先使用一个假的数据用来测试</li>
<li>起始位置和结束位置 开始 分别是 0 / :2 <em> M_PI </em> progress</li>
<li>如果想让这个圆 从十二点钟方向开始画, 需要让其实和结束分辨 减去m_pi_2即可</li>
<li>测试假数据,如果没问题,考虑把progress抛出去</li>
<li>把progress声明在.h, 然后把slider的value赋值给这个view的progress属性</li>
<li>在这个属性的set方法中,刷新(表示只要用户给我新值 我就应该刷新)</li>
</ul>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)setProgress:(<span class="built_in">CGFloat</span>)progress</div><div class="line">&#123;</div><div class="line">    _progress = progress;</div><div class="line"></div><div class="line">    <span class="comment">//只要用户给我新值，就要刷新</span></div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">//画扇形</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>) radius:<span class="number">100</span> startAngle:<span class="number">0</span>-M_PI_2 endAngle:<span class="number">2</span>*M_PI*<span class="keyword">self</span>.progress-M_PI_2 clockwise:<span class="number">1</span>];</div><div class="line">    <span class="comment">//画扇形 需要 往圆心连线</span></div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>)];</div><div class="line">    <span class="comment">//上颜色</span></div><div class="line">    [[<span class="built_in">UIColor</span> randomColor]set];</div><div class="line">    <span class="comment">//渲染</span></div><div class="line">    [path fill];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/9632d3f5jw1f9btlx6oz8g20bj0jyaam.gif" alt=""></p>
<h2 id="demo下载"><a href="#demo下载" class="headerlink" title="demo下载"></a>demo下载</h2><p><a href="https://github.com/whong7/whong7.github.io/raw/master/demo/柱状图.zip" target="_blank" rel="external">自定义进度条</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手势识别]]></title>
      <url>http://whong7.github.io/2014/11/13/%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>##手势识别-UITapGestureRecognizer(轻敲)</p>
<ul>
<li>两个属性: 几根手指点几下</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">  <span class="comment">//1.创建手势对象</span></div><div class="line">    <span class="built_in">UITapGestureRecognizer</span> *tap = [[<span class="built_in">UITapGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(tapGesture:)];</div><div class="line"></div><div class="line">    <span class="comment">//要求两根手指点击两下</span></div><div class="line">    tap.numberOfTapsRequired = <span class="number">2</span>;<span class="comment">//点几下</span></div><div class="line">    tap.numberOfTouchesRequired = <span class="number">2</span>;<span class="comment">//几根手指</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//2.添加到需要使用收拾的对象上</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:tap];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//3.实现收拾的操作（这个手势怎么用）</span></div><div class="line">-(<span class="keyword">void</span>)tapGesture:(<span class="built_in">UITapGestureRecognizer</span> *)sender</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"tapGesture"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>##手势识别-UILongPressGestureRecognizer(长按)</p>
<ul>
<li>误差范围</li>
<li>长按触发的时间</li>
<li>根据需求判断开始/移动的状态 state</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">  <span class="comment">//1.创建手势对象</span></div><div class="line">    <span class="built_in">UILongPressGestureRecognizer</span> *longpress = [[<span class="built_in">UILongPressGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(longPresGesture:)];</div><div class="line"></div><div class="line">    <span class="comment">//长按时间</span></div><div class="line">    longpress.minimumPressDuration = <span class="number">.5</span>;</div><div class="line">    <span class="comment">//手指点击时误差范围</span></div><div class="line">    longpress.allowableMovement = <span class="number">100</span>;</div><div class="line"></div><div class="line">  <span class="comment">//2.添加到需要使用收拾的对象上</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:longpress];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//3.实现收拾的操作（这个手势怎么用）</span></div><div class="line">-(<span class="keyword">void</span>)longPresGesture:(<span class="built_in">UILongPressGestureRecognizer</span> *)sender</div><div class="line">&#123;</div><div class="line">   <span class="comment">//根据状态来避免一直输出 //手指点击时误差范围 引起的输出</span></div><div class="line">   <span class="keyword">if</span>(sender.state == <span class="built_in">UIGestureRecognizerStateBegan</span>)</div><div class="line">   &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"longPresGesture"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##手势识别-UISwipeGestureRecognizer(轻扫)</p>
<ul>
<li>方向,如果想要两个方向支持,添加两个轻扫手势</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">     <span class="comment">//1.创建手势对象</span></div><div class="line">    <span class="built_in">UISwipeGestureRecognizer</span> *swipe = [[<span class="built_in">UISwipeGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(swipeGesture:)];</div><div class="line">    <span class="built_in">UISwipeGestureRecognizer</span> *swipe1= [[<span class="built_in">UISwipeGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(swipeGesture:)];</div><div class="line"></div><div class="line">    <span class="comment">//轻扫是有方向的</span></div><div class="line">    swipe1.direction = <span class="built_in">UISwipeGestureRecognizerDirectionLeft</span>;</div><div class="line"></div><div class="line">   <span class="comment">//2.添加到需要使用收拾的对象上</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:swipe];</div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:swipe1];</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//3.实现收拾的操作（这个手势怎么用）</span></div><div class="line">-(<span class="keyword">void</span>)swipeGesture:(<span class="built_in">UISwipeGestureRecognizer</span> *)sender</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(sender.direction == <span class="built_in">UISwipeGestureRecognizerDirectionLeft</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(sender.direction == <span class="built_in">UISwipeGestureRecognizerDirectionRight</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/9632d3f5jw1f9bt47dmswj20np0cgq49.jpg" alt=""></p>
<p>##手势识别-UIRotationGestureRecognizer(旋转)</p>
<ul>
<li>rotation</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">     <span class="comment">//1.创建手势对象</span></div><div class="line">    <span class="built_in">UIRotationGestureRecognizer</span> *rotate = [[<span class="built_in">UIRotationGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rotateGesture:)];</div><div class="line"></div><div class="line">   <span class="comment">//2.添加到需要使用收拾的对象上</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:rotate];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//3.实现收拾的操作（这个手势怎么用）</span></div><div class="line">-(<span class="keyword">void</span>)rotateGesture:(<span class="built_in">UIRotationGestureRecognizer</span> *)sender</div><div class="line">&#123;</div><div class="line">  <span class="comment">//    self.imageView.transform =  CGAffineTransformMakeRotation(sender.rotation);</span></div><div class="line">  <span class="comment">//    //二次旋转的时候会从水平位置开始，放弃这种做法</span></div><div class="line"></div><div class="line">    <span class="comment">//每次都计算的是偏移量，并不是用sender.rotation直接进行旋转，因为每次旋转的时候都会从零开始，并不是从上一次的位置继续旋转。</span></div><div class="line">    <span class="keyword">self</span>.imageView.transform = <span class="built_in">CGAffineTransformRotate</span>(<span class="keyword">self</span>.imageView.transform,sender.rotation);</div><div class="line"></div><div class="line">    sender.rotation = <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##12-手势识别-UIPinchGestureRecognizer(缩放)</p>
<ul>
<li>scale</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">     <span class="comment">//1.创建手势对象</span></div><div class="line">    <span class="built_in">UIPinchGestureRecognizer</span> * pinch = [[<span class="built_in">UIPinchGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pinchGesture:)];</div><div class="line"></div><div class="line">   <span class="comment">//2.添加到需要使用收拾的对象上</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:pinch];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//3.实现收拾的操作（这个手势怎么用）</span></div><div class="line">-(<span class="keyword">void</span>)pinchGesture:(<span class="built_in">UIPinchGestureRecognizer</span> *)sender</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.imageView.transform = <span class="built_in">CGAffineTransformScale</span>(<span class="keyword">self</span>.imageView.transform, sender.scale, sender.scale);</div><div class="line"></div><div class="line">    sender.scale = <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##13-手势识别-UIPanGestureRecognizer(平移)</p>
<ul>
<li>translation</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">     <span class="comment">//1.创建手势对象</span></div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGesture:)];</div><div class="line"></div><div class="line">   <span class="comment">//2.添加到需要使用收拾的对象上</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:pan];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//3.实现收拾的操作（这个手势怎么用）</span></div><div class="line">-(<span class="keyword">void</span>)panGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)sender</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">CGPoint</span> p  = [sender translationInView:sender.view];</div><div class="line"></div><div class="line"><span class="comment">//    self.imageView.center = CGPointMake(self.imageView.center.x+p.x, self.imageView.center.y+p.y);</span></div><div class="line"></div><div class="line">    <span class="keyword">self</span>.imageView.transform = <span class="built_in">CGAffineTransformTranslate</span>(<span class="keyword">self</span>.imageView.transform, p.x, p.y);</div><div class="line"></div><div class="line">    <span class="comment">//恢复到初始结果</span></div><div class="line">    [sender setTranslation:<span class="built_in">CGPointZero</span> inView:sender.view];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##14-手势冲突</p>
<ul>
<li>关于手势<ul>
<li>手势基于触摸事件</li>
<li>六种</li>
<li>使用过程,三部<ul>
<li>1.创建手势对象(做什么手势)</li>
<li>2.添加到需要使用手势的对象上(在哪使用手势)</li>
<li>3.实现手势执行的方法    (手势怎么执行)</li>
</ul>
</li>
<li>注意:旋转,缩放,平移,需要有个一个’恢复初始状态’的操作,transform改变的时候不用make</li>
<li>手势冲突: 代理解决,找最长的方法,bool类型的返回值,返回yes即可    </li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">    <span class="comment">// 1.创建手势对象(用什么手势)</span></div><div class="line">    <span class="built_in">UIRotationGestureRecognizer</span>* rotate = [[<span class="built_in">UIRotationGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(rotateGesture:)];</div><div class="line"></div><div class="line">    <span class="comment">// 2.添加到需要使用手势的对象上(谁用这个手势)</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:rotate];</div><div class="line"></div><div class="line">    <span class="comment">// 1.创建手势对象(用什么手势)</span></div><div class="line">    <span class="built_in">UIPinchGestureRecognizer</span>* pinch = [[<span class="built_in">UIPinchGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pinchGesture:)];</div><div class="line">    pinch.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="comment">// 2.添加到需要使用手势的对象上(谁用这个手势)</span></div><div class="line">    [<span class="keyword">self</span>.imageView addGestureRecognizer:pinch];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3.实现手势的操作(这个手势怎么用)</span></div><div class="line">- (<span class="keyword">void</span>)rotateGesture:(<span class="built_in">UIRotationGestureRecognizer</span>*)sender</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%f"</span>, sender.rotation);</div><div class="line"></div><div class="line">    <span class="comment">//    self.imageView.transform = CGAffineTransformMakeRotation(sender.rotation);</span></div><div class="line">    <span class="keyword">self</span>.imageView.transform = <span class="built_in">CGAffineTransformRotate</span>(<span class="keyword">self</span>.imageView.transform, sender.rotation);</div><div class="line">    <span class="comment">//</span></div><div class="line">    sender.rotation = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3.实现手势的操作(这个手势怎么用)</span></div><div class="line">- (<span class="keyword">void</span>)pinchGesture:(<span class="built_in">UIPinchGestureRecognizer</span>*)sender</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.imageView.transform = <span class="built_in">CGAffineTransformScale</span>(<span class="keyword">self</span>.imageView.transform, sender.scale, sender.scale);</div><div class="line"></div><div class="line">    sender.scale = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//    NSLog(@"%f",sender.scale);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS中三大类事件]]></title>
      <url>http://whong7.github.io/2014/10/24/iOS%E4%B8%AD%E4%B8%89%E5%A4%A7%E7%B1%BB%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><img src="http://ww4.sinaimg.cn/large/9632d3f5jw1f9bst170p5j21h20i1tee.jpg" alt=""></p>
<a id="more"></a>
<h2 id="触摸事件-NSSet"><a href="#触摸事件-NSSet" class="headerlink" title="触摸事件/NSSet"></a>触摸事件/NSSet</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 开始的时候,手指摸到这个对象的时候</div><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch*&gt;*)touches withEvent:(UIEvent*)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 移动的时候,手指在这个对象上移动</div><div class="line">- (void)touchesMoved:(NSSet&lt;UITouch*&gt;*)touches withEvent:(UIEvent*)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结束的时候,手指在这个对象上离开</div><div class="line">- (void)touchesEnded:(NSSet&lt;UITouch*&gt;*)touches withEvent:(UIEvent*)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 取消,来电话的时候回取消触摸事件</div><div class="line">- (void)touchesCancelled:(NSSet&lt;UITouch*&gt;*)touches withEvent:(UIEvent*)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __func__);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>NSSet</p>
<ul>
<li>集合 </li>
<li>无序</li>
<li>不重复</li>
<li>取值方法:随便一个(anyObject)</li>
<li>遍历方法:forin</li>
</ul>
</li>
<li><p>关于set</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    NSSet* set = [NSSet setWithObjects:@&quot;1&quot;, @&quot;222&quot;, @10, @&quot;hello&quot;, @&quot;222&quot;, nil];</div><div class="line"></div><div class="line">    // anyobject 会取一个当前集合 &apos;方便&apos; 的元素  不保证是随机的</div><div class="line">    NSLog(@&quot;%@&quot;, set.anyObject);</div><div class="line">```	</div><div class="line"></div><div class="line">## 单点触摸案例</div><div class="line"></div><div class="line">```objc</div><div class="line">//开始点击</div><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    //获取触摸对象</div><div class="line">    UITouch *t = [touches anyObject];</div><div class="line"></div><div class="line">    //手指的位置</div><div class="line">    //inView 的 view 参数 表示，以xxxxx的坐标系的位置为原点</div><div class="line">    CGPoint p = [t locationInView:self.superview];</div><div class="line"></div><div class="line">    //修改center</div><div class="line">    self.center = p ;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)touchesMoved:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="comment">//获取触摸对象</span></div><div class="line">    <span class="built_in">UITouch</span> *t = [touches anyObject];</div><div class="line"></div><div class="line">    <span class="comment">//手指的位置</span></div><div class="line">    <span class="comment">//inView 的 view 参数 表示，以xxxxx的坐标系的位置为原点</span></div><div class="line">    <span class="built_in">CGPoint</span> p = [t locationInView:<span class="keyword">self</span>];<span class="comment">//self.superview也可以用</span></div><div class="line">    <span class="built_in">CGPoint</span> pLast = [t previousLocationInView:<span class="keyword">self</span>];</div><div class="line"></div><div class="line">    <span class="built_in">CGFloat</span> offsetX = p.x - pLast.x;</div><div class="line">    <span class="built_in">CGFloat</span> offsetY = p.y - pLast.y;</div><div class="line"></div><div class="line">    <span class="comment">//修改center</span></div><div class="line">    <span class="keyword">self</span>.center = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.center.x + offsetX, <span class="keyword">self</span>.center.y + offsetY);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多点触摸案例"><a href="#多点触摸案例" class="headerlink" title="多点触摸案例"></a>多点触摸案例</h2><p><strong>触摸点是随机的,sb中要开启多点模式</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"WHDemoView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WHDemoView</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)<span class="built_in">NSArray</span> *array;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WHDemoView</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.array = @[<span class="string">@"spark_blue"</span>,<span class="string">@"spark_red"</span>];</div><div class="line">    [<span class="keyword">self</span> addSpark:touches];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesMoved:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> addSpark:touches];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)addSpark:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UITouch</span> * t <span class="keyword">in</span> touches) &#123;<span class="comment">//t是随机的</span></div><div class="line"></div><div class="line"><span class="comment">//        //获取出没对象</span></div><div class="line"><span class="comment">//        UITouch * t = touches.anyObject;</span></div><div class="line">        <span class="comment">//获取手指的位置</span></div><div class="line">        <span class="built_in">CGPoint</span> p =[t locationInView:<span class="keyword">self</span>];</div><div class="line">        <span class="comment">//imageView</span></div><div class="line">        <span class="built_in">UIImageView</span> * imageView = [[<span class="built_in">UIImageView</span> alloc]initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="keyword">self</span>.array[i]]];</div><div class="line">        imageView.center = p;</div><div class="line">        [<span class="keyword">self</span> addSubview:imageView];</div><div class="line"></div><div class="line"></div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2</span> animations:^&#123;</div><div class="line">            imageView.alpha = <span class="number">0</span>;</div><div class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">            [imageView removeFromSuperview];</div><div class="line">        &#125;];</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/9632d3f5jw1f9bsudoj8gg20bj0jytsv.gif" alt=""></p>
<h2 id="思维导图及示例demo下载"><a href="#思维导图及示例demo下载" class="headerlink" title="思维导图及示例demo下载"></a>思维导图及示例demo下载</h2><p><a href="https://github.com/whong7/whong7.github.io/raw/master/MindNotePictures/iOS中三大类事件.png" target="_blank" rel="external">思维导图</a><br><a href="https://github.com/whong7/whong7.github.io/raw/master/demo/多点触摸的案例.zip" target="_blank" rel="external">示例demo</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[控件不能响应的情况]]></title>
      <url>http://whong7.github.io/2014/10/22/%E6%8E%A7%E4%BB%B6%E4%B8%8D%E8%83%BD%E5%93%8D%E5%BA%94%E7%9A%84%E6%83%85%E5%86%B5/</url>
      <content type="html"><![CDATA[<p>##控件不能响应的情况</p>
<ul>
<li>控件隐藏的时候</li>
<li>控件透明度小于等于0.01的时候</li>
<li>当用户交互关闭的时候</li>
<li>子控件超出父控件的有效范围<br><img src="http://ww4.sinaimg.cn/large/9632d3f5jw1f9bszts0k6j20jf0gz0vj.jpg" alt=""></li>
</ul>
<p>##事件的产生和传递</p>
<ul>
<li><p>寻找的过程</p>
<ul>
<li>先看是不是允许用户交互</li>
<li>看手指的位置 是否在自己的范围内</li>
<li>倒着往前遍历自己的子控件 执行hitTest</li>
<li>如果子控件有, 直接返回,如果没有,直接返回自己(表示,没有比自己再合适不过处理这个事件的了)</li>
</ul>
</li>
<li><p>响应者链条: 能够响应事件的一串响应者对象 </p>
</li>
<li>从下往上通过hitTest找, 从上往下通过touchBegan传递事件    </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[内存警告方法]]></title>
      <url>http://whong7.github.io/2014/04/22/3.%E5%86%85%E5%AD%98%E8%AD%A6%E5%91%8A%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="内存警告方法"><a href="#内存警告方法" class="headerlink" title="内存警告方法"></a>内存警告方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (void)didReceiveMemoryWarning</div><div class="line">&#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line"></div><div class="line">    // Called when the parent application receives a memory warning.</div><div class="line">    // 这个方法在应用程序接受到内存警告的时候调用</div><div class="line">    // On iOS 6.0 it will no longer clear the view by default.</div><div class="line">    // 在6.0只有 不再默认清理 self.view</div><div class="line"></div><div class="line">    // 当这个view是否正在显示</div><div class="line">    // 这个view是否已经被加载</div><div class="line"></div><div class="line">    if (self.isViewLoaded &amp;&amp; self.view.window == nil) &#123;</div><div class="line">        [self setView:nil];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 处理当前控制器强引用的属性</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[控制器与视图的生命周期]]></title>
      <url>http://whong7.github.io/2014/04/19/2.%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E8%A7%86%E5%9B%BE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h2 id="控制器在导航控制器的生命周期"><a href="#控制器在导航控制器的生命周期" class="headerlink" title="控制器在导航控制器的生命周期"></a>控制器在导航控制器的生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 控制器在nav中 push的时候 的过程</div><div class="line">// one 将要消失</div><div class="line">// two view加载完成</div><div class="line">// two 将要显示</div><div class="line">// one 已经消失</div><div class="line">// two 已经显示</div><div class="line"></div><div class="line">// 控制器在nav中 拖拽返回的时候</div><div class="line">// 拖拽的时候  two 将要消失 one 将要显示</div><div class="line">// 松手返回到上一个页面 two 已经消失 one 已经显示</div><div class="line"></div><div class="line">// 控制器在nav中 拖拽返回的时候</div><div class="line">// 拖拽的时候  two 将要消失 one 将要显示</div><div class="line">// 松手没有返回上一个页面  one 将要消失 one 已经消失 two 将要显示 two 已经显示</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="控制器在标签控制器的生命周期"><a href="#控制器在标签控制器的生命周期" class="headerlink" title="控制器在标签控制器的生命周期"></a>控制器在标签控制器的生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 控制器在tabbarController中的声明周期</div><div class="line">// two view加载完成</div><div class="line">// two view将要显示</div><div class="line">// one view将要消失</div><div class="line">// one view已经消失</div><div class="line">// two view已经显示</div></pre></td></tr></table></figure>
<h2 id="控制器在nav的生命周期"><a href="#控制器在nav的生命周期" class="headerlink" title="控制器在nav的生命周期"></a>控制器在nav的生命周期</h2><hr>
<p><strong>控制器在nav中push的时候的过程</strong><br>// one 将要消失<br>// two view加载完成<br>// two 将要显示<br>// one 已经消失<br>// two 已经显示</p>
<p><strong>控制器在nav中 拖拽返回的时候</strong><br>// 拖拽的时候  two 将要消失 one 将要显示<br>// 松手返回到上一个页面 two 已经消失 one 已经显示</p>
<p><strong>控制器在nav中 拖拽返回的时候</strong><br>// 拖拽的时候  two 将要消失 one 将要显示<br>// 松手没有返回上一个页面  one 将要消失 one 已经消失 two 将要显示 two 已经显示</p>
<hr>
<h2 id="视图的生命周期方法"><a href="#视图的生命周期方法" class="headerlink" title="视图的生命周期方法"></a>视图的生命周期方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DemoView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DemoView</span></span></div><div class="line"></div><div class="line"><span class="comment">// 将要移动到superView 通过'addSubView'</span></div><div class="line">- (<span class="keyword">void</span>)willMoveToSuperview:(<span class="keyword">nullable</span> <span class="built_in">UIView</span>*)newSuperview</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> willMoveToSuperview:newSuperview];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 已经移动到superView</span></div><div class="line">- (<span class="keyword">void</span>)didMoveToSuperview</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> didMoveToSuperview];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将要移动到window '显示/消失'</span></div><div class="line">- (<span class="keyword">void</span>)willMoveToWindow:(<span class="keyword">nullable</span> <span class="built_in">UIWindow</span>*)newWindow</div><div class="line">&#123;</div><div class="line"></div><div class="line">    [<span class="keyword">super</span> willMoveToWindow:newWindow];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"willMoveToWindow ------- &gt; %@"</span>, newWindow);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 已经移动到window '显示/消失'</span></div><div class="line">- (<span class="keyword">void</span>)didMoveToWindow</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> didMoveToWindow];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>输出结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2016-07-09 13:17:27.255 05-控制器生命周期[31547:3527271] OneViewController -- -[ViewController viewDidLoad]</div><div class="line">2016-07-09 13:17:27.256 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView willMoveToSuperview:]</div><div class="line">2016-07-09 13:17:27.256 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView didMoveToSuperview]</div><div class="line">2016-07-09 13:17:27.258 05-控制器生命周期[31547:3527271] OneViewController -- -[ViewController viewWillAppear:]</div><div class="line">2016-07-09 13:17:27.258 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView willMoveToWindow:]</div><div class="line">2016-07-09 13:17:27.258 05-控制器生命周期[31547:3527271] willMoveToWindow ------- &gt; &lt;UIWindow: 0x7f8d88cbd2d0; frame = (0 0; 375 667); gestureRecognizers = &lt;NSArray: 0x7f8d88cbe4d0&gt;; layer = &lt;UIWindowLayer: 0x7f8d88cb1fc0&gt;&gt;</div><div class="line">2016-07-09 13:17:27.259 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView didMoveToWindow]</div><div class="line">2016-07-09 13:17:27.266 05-控制器生命周期[31547:3527271] OneViewController -- -[ViewController viewDidAppear:]</div></pre></td></tr></table></figure>
<ul>
<li>如何判断一个view是否显示在屏幕上,如果这个view的.window属性,有值,证明他已经显示在当前的屏幕上,如果没有值的话,表示当前没有显示在屏幕上</li>
<li>addSubView 会触发’willMoveToSuperview’’didMoveToSuperview’的方法</li>
<li>这四个方法显示和消失的时候都会调用,只不过是移动到不同的view和不同window</li>
</ul>
<h2 id="整体思维导图"><a href="#整体思维导图" class="headerlink" title="整体思维导图"></a>整体思维导图</h2><p><img src="http://ww2.sinaimg.cn/large/9632d3f5jw1f905677xa0j21kw1qnh36.jpg" alt=""></p>
<p>高清思维导图下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNotePictures/生命周期.png" target="_blank" rel="external">绘图.png</a></p>
<p>MindNode源文件下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNote/%20生命周期.zip" target="_blank" rel="external">绘图.mindnode</a></p>
<h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul>
<li>微博：<a href="http://weibo.com/u/2519913461" target="_blank" rel="external">@whong77</a></li>
<li>邮箱：<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#119;&#104;&#111;&#x6e;&#x67;&#55;&#57;&#49;&#x31;&#50;&#x30;&#x37;&#64;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#109;">&#119;&#104;&#111;&#x6e;&#x67;&#55;&#57;&#49;&#x31;&#50;&#x30;&#x37;&#64;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#109;</a></li>
</ul>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://whong7.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
