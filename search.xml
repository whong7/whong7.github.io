<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[控制器创建方式]]></title>
      <url>http://whong7.github.io/2014/12/27/1.%E6%8E%A7%E5%88%B6%E5%99%A8%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>控制器的三种创建方式-代码<br>控制器的三种创建方式-sb<br>控制器的三种创建方式-xib<br>用 XIB 加载控制器的细节</p>
<a id="more"></a>
<hr>
<h3 id="控制器的三种创建方式-代码"><a href="#控制器的三种创建方式-代码" class="headerlink" title="控制器的三种创建方式-代码"></a>控制器的三种创建方式-代码</h3><ul>
<li>直接alloc init</li>
</ul>
<h3 id="控制器的三种创建方式-sb"><a href="#控制器的三种创建方式-sb" class="headerlink" title="控制器的三种创建方式-sb"></a>控制器的三种创建方式-sb</h3><ul>
<li>首先都要获取 sb 对象</li>
<li>两种方式:<ul>
<li>获取箭头所指向的控制器<ul>
<li>(不带参数的)</li>
</ul>
</li>
<li>获取指定sbID的控制器<ul>
<li>(带参数的)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="控制器的三种创建方式-xib"><a href="#控制器的三种创建方式-xib" class="headerlink" title="控制器的三种创建方式-xib"></a>控制器的三种创建方式-xib</h3><ul>
<li>三种:<ul>
<li>指定xib的名字 (创建控制器的时候的init的方法)</li>
<li>同名xib</li>
<li>同名去掉Controller的xib</li>
</ul>
</li>
<li>注意:<ul>
<li>xib的filesOwner为类名</li>
<li>view要记得连线     </li>
</ul>
</li>
</ul>
<h3 id="用-XIB-加载控制器的细节"><a href="#用-XIB-加载控制器的细节" class="headerlink" title="用 XIB 加载控制器的细节"></a>用 XIB 加载控制器的细节</h3><ul>
<li>优先级:<ul>
<li>如果指定的xib的名字,回去加载执行的xib</li>
<li>如果没有指定xib的名字<ul>
<li>如果有同名的xib,会去加载同名的xib</li>
<li>如果没有同名的xib<ul>
<li>如果有同名去掉Controller的xib,会去加载同名去掉Controller的xib</li>
<li>如果没有同名去掉Controller的xib,会创建一个空白的控制器        </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>代码示例</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">AppDelegate.m</div><div class="line"></div><div class="line">	- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span>*)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span>*)launchOptions</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</div><div class="line"></div><div class="line"><span class="comment">// 1. 代码</span></div><div class="line">        TestViewController* vc = [[TestViewController alloc] init];</div><div class="line"></div><div class="line"><span class="comment">// 2.通过sb加载控制器</span></div><div class="line"></div><div class="line"><span class="number">2.1</span> 加载箭头所指向的控制器</div><div class="line">    <span class="comment">// 2.1.1 获取sb对象</span></div><div class="line">        <span class="built_in">UIStoryboard</span>* sb = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Test"</span> bundle:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 2.1.2 加载箭头所指向的控制器</span></div><div class="line">        TestViewController* vc = sb.instantiateInitialViewController;</div><div class="line"><span class="number">2.2</span> 加载一个带sbID的控制器</div><div class="line">    <span class="comment">// 2.2.1 获取sb对象</span></div><div class="line">        <span class="built_in">UIStoryboard</span>* sb = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Test"</span> bundle:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 2.2.2 加载一个带sbID的控制器</span></div><div class="line">        TestViewController* vc = [sb instantiateViewControllerWithIdentifier:<span class="string">@"test"</span>];</div><div class="line"></div><div class="line"><span class="comment">// 3.通过xib的形式加载控制器 (同名的xib优先级会比同名去掉Controller的要高!!!)</span></div><div class="line"></div><div class="line">  <span class="comment">// 3.1 指定xib名称</span></div><div class="line">    OneViewController* vc = [[OneViewController alloc] initWithNibName:<span class="string">@"Testtt"</span> bundle:<span class="literal">nil</span>];</div><div class="line">  <span class="comment">// 3.2 通过init的方法创建 (同名的xib)</span></div><div class="line">    <span class="comment">// 当调用init方法创建的时候 系统会尝试加载同名的xib</span></div><div class="line">        OneViewController* vc = [[OneViewController alloc] init];</div><div class="line"></div><div class="line"><span class="comment">// 3.3 通过init的方法创建 (同名去掉Controller的xib)</span></div><div class="line">    <span class="comment">// 当调用init方法创建的时候 系统会尝试加载同名去掉Controller的xib</span></div><div class="line">        OneViewController* vc = [[OneViewController alloc] init];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.window.rootViewController = vc;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图像绘制]]></title>
      <url>http://whong7.github.io/2014/12/22/%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>本文简单介绍了图像绘制的方法以及相应的代码示例，并附上整体思维导图，如有纰漏之处还望指正<br><a id="more"></a></p>
<h2 id="Quartz2D-Core-Graphics介绍"><a href="#Quartz2D-Core-Graphics介绍" class="headerlink" title="Quartz2D/Core Graphics介绍"></a>Quartz2D/Core Graphics介绍</h2><ul>
<li>Quartz2D的API是哪个语言的?<ul>
<li>c语言 </li>
</ul>
</li>
<li>Quartz2D的API来自于哪个框架?<ul>
<li>Core Graphics</li>
</ul>
</li>
<li>Quartz2D可以做什么?<ul>
<li>饼状图,柱状图,折线图</li>
<li>自定义控件</li>
</ul>
</li>
<li>Quartz2D 支持 iOS 开发, mac 开发, 跨平台</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/mw690/9632d3f5jw1f8wu4uorx2j20if0km75x.jpg" alt=""></p>
<h2 id="图形上下文介绍"><a href="#图形上下文介绍" class="headerlink" title="图形上下文介绍"></a>图形上下文介绍</h2><ul>
<li>图形上下文也叫做绘图上下文</li>
<li>图形上下文的类型?<ul>
<li>CGContextRef</li>
</ul>
</li>
<li>图形上下文包含的主要信息?<ul>
<li>路径(圆,方,线条)</li>
<li>状态(红色,多宽)</li>
<li>输出目标(在哪显示)</li>
</ul>
</li>
</ul>
<h2 id="绘图的步骤-方式-静态分析工具"><a href="#绘图的步骤-方式-静态分析工具" class="headerlink" title="绘图的步骤/方式/静态分析工具"></a>绘图的步骤/方式/静态分析工具</h2><ul>
<li>绘图的步骤有哪些?<ul>
<li>获取当前上下文</li>
<li>拼接路径 同时 把路径添加到上下文当中</li>
<li>渲染 </li>
</ul>
</li>
<li>静态分析工具的作用?<ul>
<li>不仅能够检测内存泄漏的问题,还能检测其他的问题. </li>
<li>这个工具仅仅是静态的在分析内存的问题,并不能真正的检测内存泄漏的问题.</li>
</ul>
</li>
<li>如何释放路径?<ul>
<li>CGPathRelease(path);</li>
<li>CFRelease(path);</li>
</ul>
</li>
<li>ARC仅仅是处理oc的引用计数的问题</li>
<li>在c中如果看到了create/copy/retain,一般都需要释放    </li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 步骤和方式</span></div><div class="line">- (<span class="keyword">void</span>)test1</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 绘图的步骤</span></div><div class="line"></div><div class="line"><span class="comment">// 方式1</span></div><div class="line"></div><div class="line">        <span class="comment">// 1.获取当前图形上下文</span></div><div class="line">        <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">        <span class="comment">// 2.拼接路径 同时 把路径添加到上下文当中</span></div><div class="line">        <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 起点</span></div><div class="line">        <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">200</span>); <span class="comment">// 终点</span></div><div class="line"></div><div class="line">        <span class="comment">// 3.渲染(显示)</span></div><div class="line">        <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line"><span class="comment">// 方式2</span></div><div class="line"></div><div class="line">    <span class="comment">// 1.获取当前图形上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 2.拼接路径</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGPathAddLineToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 3.把路径添加到上下文当中</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path);</div><div class="line"></div><div class="line">    <span class="comment">// 4.渲染(显示)</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line">    <span class="comment">//    // 释放</span></div><div class="line">    <span class="built_in">CGPathRelease</span>(path);</div><div class="line">    <span class="comment">//    CFRelease(path);//可以释放所有Core foundation对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="绘图实例"><a href="#绘图实例" class="headerlink" title="绘图实例"></a>绘图实例</h2><ul>
<li>矩形<ul>
<li>addRect</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 矩形</span></div><div class="line"></div><div class="line">    <span class="comment">// 获取上下文 uijjcc:</span></div><div class="line"></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 拼接路径 同时 添加到上下文当中</span></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 渲染</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>椭圆<ul>
<li>addEllipse</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 椭圆</span></div><div class="line"></div><div class="line">   <span class="comment">// 获取上下文</span></div><div class="line">   <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">   <span class="comment">// 路径</span></div><div class="line">   <span class="built_in">CGContextAddEllipseInRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>));</div><div class="line"></div><div class="line">   <span class="comment">// 渲染</span></div><div class="line">   <span class="built_in">CGContextStrokePath</span>(ctx);</div></pre></td></tr></table></figure>
<ul>
<li>弧<ul>
<li>addArc</li>
</ul>
</li>
</ul>
<pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 弧</span></div><div class="line"></div><div class="line">   <span class="comment">// 上下文</span></div><div class="line">   <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">   </div><div class="line">   <span class="comment">// 路径</span></div><div class="line">   <span class="comment">// x , y 圆心</span></div><div class="line">   <span class="comment">// radius 半径</span></div><div class="line">   <span class="comment">// start 起始的位置</span></div><div class="line">   <span class="comment">// end 结束的位置</span></div><div class="line">   <span class="comment">// clockwise 是否是顺时针</span></div><div class="line">   <span class="built_in">CGContextAddArc</span>(ctx, <span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, M_PI_2, <span class="number">1</span>);</div><div class="line">   <span class="comment">// 渲染</span></div><div class="line">   <span class="built_in">CGContextStrokePath</span>(ctx);</div></pre></td></tr></table></figure>
</code></pre><p><img src="http://ww1.sinaimg.cn/mw690/9632d3f5jw1f8wukfpij9j211y0qm41n.jpg" alt=""></p>
<h2 id="绘图的样式"><a href="#绘图的样式" class="headerlink" title="绘图的样式"></a>绘图的样式</h2><ul>
<li>线宽?<ul>
<li>CGContextSetLineWidth </li>
</ul>
</li>
<li>头尾样式?<ul>
<li>CGContextSetLineCap</li>
</ul>
</li>
<li>连接处样式?<ul>
<li>CGContextSetLineJoin </li>
</ul>
</li>
<li>虚线?<ul>
<li>CGContextSetLineDash </li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 画线</span></div><div class="line"></div><div class="line">    <span class="comment">// 上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 路径</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">50</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">250</span>, <span class="number">100</span>);</div><div class="line">    <span class="comment">//    CGContextAddLineToPoint(ctx, 200, 200);</span></div><div class="line"></div><div class="line"><span class="comment">// 设置线宽</span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">100</span>);<span class="comment">//对上下文所有的东西进行操作，渲染的时候起作用</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 设置头尾样式</span></div><div class="line">    <span class="built_in">CGContextSetLineCap</span>(ctx, kCGLineCapSquare);</div><div class="line">    <span class="comment">//    kCGLineCapButt, // 默认</span></div><div class="line">    <span class="comment">//    kCGLineCapRound, // 圆角</span></div><div class="line">    <span class="comment">//    kCGLineCapSquare // 方的,两头会加宽度的一半</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 设置连接处的样式</span></div><div class="line">    <span class="built_in">CGContextSetLineJoin</span>(ctx, kCGLineJoinBevel);</div><div class="line">    <span class="comment">//    kCGLineJoinMiter, // 默认</span></div><div class="line">    <span class="comment">//    kCGLineJoinRound, // 圆角</span></div><div class="line">    <span class="comment">//    kCGLineJoinBevel // 切角</span></div><div class="line"></div><div class="line"><span class="comment">// 虚线</span></div><div class="line">    <span class="comment">// phase 阶段 通常传0</span></div><div class="line">    <span class="comment">// lengths 数组</span></div><div class="line">    <span class="comment">// count 数组长度</span></div><div class="line"></div><div class="line">    <span class="comment">//     CGFloat lengths[] = &#123; 10, 20 &#125;;</span></div><div class="line">    <span class="comment">// 长度 10 间距20</span></div><div class="line"></div><div class="line">    <span class="comment">//   CGFloat lengths[] = &#123; 10, 20, 30 &#125;;</span></div><div class="line">    <span class="comment">// 长度 10  间距 20  长度 30  间距10  长度 20  间距30   长度 10  间距 20</span></div><div class="line"></div><div class="line">    <span class="built_in">CGFloat</span> lengths[] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;;</div><div class="line">    <span class="built_in">CGContextSetLineDash</span>(ctx, <span class="number">30</span>, lengths, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 渲染</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="渲染的方式-绘图的颜色"><a href="#渲染的方式-绘图的颜色" class="headerlink" title="渲染的方式/绘图的颜色"></a>渲染的方式/绘图的颜色</h2><ul>
<li>关闭路径?<ul>
<li>CGContextClosePath(ctx); // 从当前的位置 连线 到初始的位置 </li>
</ul>
</li>
<li>描边?<ul>
<li>stork</li>
</ul>
</li>
<li>填充?<ul>
<li>fill</li>
</ul>
</li>
<li>color对象的 set/setFill/setStrok 区别?<ul>
<li>setFill 仅仅是设置填充的颜色</li>
<li>setStrok 仅仅是设置描边的颜色</li>
<li>set 两个都设置</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 渲染的方法</span></div><div class="line">- (<span class="keyword">void</span>)test6</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 三角形</span></div><div class="line"></div><div class="line">    <span class="comment">// 上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 路径</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">150</span>, <span class="number">200</span>);</div><div class="line">    <span class="built_in">CGContextClosePath</span>(ctx); <span class="comment">// 从当前的位置 连线 到初始的位置</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置颜色oc</span></div><div class="line">    [[<span class="built_in">UIColor</span> redColor] setFill];<span class="comment">//填充颜色</span></div><div class="line"></div><div class="line">    [[<span class="built_in">UIColor</span> whiteColor] set];<span class="comment">//线的颜色</span></div><div class="line"></div><div class="line">    [[<span class="built_in">UIColor</span> blueColor] setStroke];<span class="comment">//对两者都进行设定</span></div><div class="line">    <span class="comment">// 渲染</span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(ctx, kCGPathFillStroke);<span class="comment">//对  填充和描边  进行渲染</span></div><div class="line">    <span class="comment">//    CGContextFillPath(ctx);</span></div><div class="line"></div><div class="line">    <span class="comment">// CGContextDrawPath(ctx, kCGPathStroke); &lt;==&gt; CGContextStrokePath(ctx);</span></div><div class="line">    <span class="comment">// CGContextDrawPath(ctx, kCGPathFill); &lt;==&gt; CGContextFillPath(ctx);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="补充-不同样式的线"><a href="#补充-不同样式的线" class="headerlink" title="补充-不同样式的线"></a>补充-不同样式的线</h2><ul>
<li>如果想要出现不同样式的线<ul>
<li>需要渲染多次</li>
</ul>
</li>
<li>渲染的过程,仅仅是把路径信息,渲染上去.这个时候,当前上下文还在,路径信息,如果被渲染以后,就没有了.但是,状态信息和目标信息都还在    </li>
</ul>
<p><strong>两条线  一条粗，一条细</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不同样式的线</span></div><div class="line">- (<span class="keyword">void</span>)test7</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">25</span>);</div><div class="line">    <span class="comment">// 路径</span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">100</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 渲染：渲染的过程，是把当前所有的东西全都剪切到UIView。</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line">        <span class="comment">//从新设定上下文</span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">20</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="奇偶填充规则"><a href="#奇偶填充规则" class="headerlink" title="奇偶填充规则"></a>奇偶填充规则</h2><ul>
<li>even odd</li>
<li>不是默认的填充规则,如果需要使用需要调用 EOFill</li>
<li>奇填偶不填</li>
</ul>
<p><strong>参考代码:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 奇偶填充规则</span></div><div class="line">-(<span class="keyword">void</span>)test8</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGContextAddArc</span>(ctx, <span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * M_PI, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>));</div><div class="line"></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">120</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">250</span>));</div><div class="line"></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(ctx, kCGPathEOFill);<span class="comment">//eo：奇偶--奇填偶不填，如果只是kCGPathFill：就是一坨黑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非零环绕数规则"><a href="#非零环绕数规则" class="headerlink" title="非零环绕数规则"></a>非零环绕数规则</h2><ul>
<li>如果是从右往左 +1</li>
<li>如果是从左往右 -1</li>
<li>如果最终结果不为0 那么填充</li>
<li>非零环绕数是默认的填充规则</li>
</ul>
<p><strong>参考代码:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Drawing code</span></div><div class="line"></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGMutablePathRef</span> path1 = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGMutablePathRef</span> path2 = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGPathAddArc</span>(path1, <span class="literal">NULL</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * M_PI, <span class="number">1</span>);</div><div class="line">    <span class="built_in">CGPathAddArc</span>(path2, <span class="literal">NULL</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">2</span> * M_PI, <span class="number">0</span>);</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path1);</div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, path2);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextFillPath</span>(ctx);</div><div class="line"></div><div class="line">    <span class="built_in">CGPathRelease</span>(path1);</div><div class="line">    <span class="built_in">CGPathRelease</span>(path2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于drawRect"><a href="#关于drawRect" class="headerlink" title="关于drawRect"></a>关于drawRect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//- 为什么要把代码写在drawRect当中?</div><div class="line">// 因为这个方法可以获取到正确的上下文</div><div class="line"></div><div class="line">//- drawrect方法中rect参数的含义是什么?</div><div class="line">// 当前view的bounds</div><div class="line"></div><div class="line">//- drawrect什么时候调用?</div><div class="line">// 这个方法是系统自动调用,不要手动调用</div><div class="line">// 1.当这个view第一次显示的时候会调用</div><div class="line">// 2.当重绘的时候会调用</div><div class="line"></div><div class="line">//- 如何重绘?</div><div class="line">// 1.调用需要重绘的对象的 setNeedsDisplay</div><div class="line">// 2.调用需要重绘的对象的 setNeedsDisplayInRect</div></pre></td></tr></table></figure>
<h2 id="UIKit绘制图形-lt-oc-gt"><a href="#UIKit绘制图形-lt-oc-gt" class="headerlink" title="UIKit绘制图形 &lt;oc&gt;"></a>UIKit绘制图形 <code>&lt;oc&gt;</code></h2><p><strong>画一条线</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">//Crawing code</span></div><div class="line"></div><div class="line"><span class="comment">//1.path对象</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [[<span class="built_in">UIBezierPath</span> alloc]init];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//2.路径</span></div><div class="line">    <span class="comment">//线</span></div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>)];</div><div class="line"></div><div class="line"><span class="comment">//3.渲染</span></div><div class="line">    [path stroke];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>矩形<ul>
<li>bezierPathWithRect </li>
</ul>
</li>
<li>椭圆<ul>
<li>bezierPathWithOvalInRect     </li>
</ul>
</li>
<li>圆角矩形<ul>
<li>bezierPathWithRoundedRect</li>
<li>圆角矩形 超过了半径的三分之二 会变成一个圆</li>
</ul>
</li>
<li>圆<ul>
<li>bezierPathWithArcCenter </li>
</ul>
</li>
<li>c 和 oc 的区别?<ul>
<li>Quartz2d是C的api</li>
<li>c的功能比oc的强大</li>
<li>oc仅仅是封装了一部分c的api</li>
<li>从代码量上来说 oc比c 简单</li>
<li>一般情况,工作中用oc.如果oc实现不了的功能用c</li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">    <span class="comment">//Crawing code</span></div><div class="line"></div><div class="line"><span class="comment">//1.矩形</span></div><div class="line"></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">    [path stroke];</div><div class="line"></div><div class="line"><span class="comment">//2.椭圆</span></div><div class="line"></div><div class="line">    <span class="built_in">UIBezierPath</span> *path1 = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">    [path1 stroke];</div><div class="line"></div><div class="line"><span class="comment">//3.圆角矩形</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>) cornerRadius:<span class="number">30</span>];<span class="comment">//50正好，超过了半径的2/3的话 会变成一个圆</span></div><div class="line">    [path2 stroke];</div><div class="line"></div><div class="line"><span class="comment">//4.弧</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path3 = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">150</span>, <span class="number">150</span>) radius:<span class="number">100</span> startAngle:<span class="number">0</span> endAngle:M_PI_2 clockwise:<span class="number">1</span>];</div><div class="line">    [path3 stroke];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="oc和c混用"><a href="#oc和c混用" class="headerlink" title="oc和c混用"></a>oc和c混用</h2><ul>
<li>c和oc可以混用</li>
<li>c如何转成oc的path<ul>
<li>通过类方法 传入 CGPath</li>
</ul>
</li>
<li>oc如何转成c的path<ul>
<li>直接通过ocPath的.CGPath即可 </li>
</ul>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">   <span class="comment">//1.c方法</span></div><div class="line"></div><div class="line">    <span class="comment">//上下文</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="comment">//路径</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGPathAddLineToPoint</span>(path, <span class="literal">NULL</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    <span class="comment">//oc路径</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *ocPath = [<span class="built_in">UIBezierPath</span> bezierPathWithCGPath:path];</div><div class="line"></div><div class="line">    [ocPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">100</span>)];</div><div class="line"></div><div class="line"><span class="comment">//    [ocPath stroke];//oc显示</span></div><div class="line"></div><div class="line"><span class="comment">//   将oc转化成c的path并添加到上下文</span></div><div class="line">     <span class="comment">//CGContextAddPath(ctx, path);</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, ocPath.CGPath);</div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line"></div><div class="line">    <span class="comment">//释放c的路径</span></div><div class="line">    <span class="built_in">CGPathRelease</span>(path);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIKit绘制字符串"><a href="#UIKit绘制字符串" class="headerlink" title="UIKit绘制字符串"></a>UIKit绘制字符串</h2><ul>
<li>drawInRect?<ul>
<li>drawInRect 绘制到指定的区域</li>
</ul>
</li>
<li>drawAtPoint?<ul>
<li>// drawAtPoint 从某个点开始画</li>
</ul>
</li>
<li>NSShadow</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line">  <span class="comment">//绘制字符串</span></div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"我是whong7"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//创建影子</span></div><div class="line">    <span class="built_in">NSShadow</span> *s = [[<span class="built_in">NSShadow</span> alloc]init];</div><div class="line"></div><div class="line">    s.shadowOffset = <span class="built_in">CGSizeMake</span>(<span class="number">100</span>, <span class="number">100</span>);<span class="comment">//创建影子位置</span></div><div class="line">    s.shadowBlurRadius = <span class="number">0</span>;<span class="comment">//影子模糊程度，越大越模糊</span></div><div class="line">    s.shadowColor = [<span class="built_in">UIColor</span> yellowColor];<span class="comment">//影子的颜色</span></div><div class="line"></div><div class="line">    <span class="built_in">NSDictionary</span> *attr =</div><div class="line">  @&#123;</div><div class="line">    <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20</span>],<span class="comment">//字体大小</span></div><div class="line"><span class="comment">//    NSBackgroundColorAttributeName:[UIColor blueColor],//背景颜色,有背景就不显示影子字了</span></div><div class="line">    <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> redColor],<span class="comment">//字体颜色</span></div><div class="line">    <span class="built_in">NSUnderlineStyleAttributeName</span>:@<span class="number">1</span>,</div><div class="line">    <span class="built_in">NSShadowAttributeName</span>:s</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//drawAtPoint 从某个点开始，不会自动换行</span></div><div class="line"><span class="comment">//    [str drawAtPoint:CGPointMake(0, 0) withAttributes:attr];</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//drawAtRect 区域内书写，会自动换行</span></div><div class="line">    [str drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>) withAttributes:attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIKit绘制图像"><a href="#UIKit绘制图像" class="headerlink" title="UIKit绘制图像"></a>UIKit绘制图像</h2><ul>
<li>drawInRect?<ul>
<li>拉伸到指定的区域, 小图会变大 大图会变小 </li>
</ul>
</li>
<li>drawAtPoint?<ul>
<li>从某一个点开始绘制 不变形 </li>
</ul>
</li>
<li>drawAsPatternInRect?<ul>
<li>平铺到某个区域 不变形 </li>
</ul>
</li>
<li>可以做水印相关的东西    </li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DemoView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DemoView</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</div><div class="line">&#123;</div><div class="line"><span class="comment">//绘制图片</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"me"</span>];</div><div class="line"></div><div class="line"><span class="comment">//从某一个点开始绘制</span></div><div class="line">    [image drawAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>)];</div><div class="line"></div><div class="line"><span class="comment">//拉伸</span></div><div class="line">    [image drawInRect:rect];</div><div class="line"></div><div class="line"><span class="comment">//平铺</span></div><div class="line">    [image drawAsPatternInRect:rect];</div><div class="line"></div><div class="line"><span class="comment">//加水印</span></div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"水印"</span>;</div><div class="line">    [str drawAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>) withAttributes:@&#123; <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> whiteColor] &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="图像保存"><a href="#图像保存" class="headerlink" title="图像保存"></a>图像保存</h2><ul>
<li>UIImageWriteToSavedPhotosAlbum</li>
<li>参数分别为 保存的图片/回调target/回调方法/标记</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)save:(<span class="keyword">id</span>)sender &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//开启创建上下文 图片类型 的 图形上下文</span></div><div class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span>.DrawView.bounds.size);</div><div class="line"></div><div class="line">    <span class="comment">//获取上下文，不用获取就可以画</span></div><div class="line"><span class="comment">//    CGContextRef ctx = UIGraphicsGetCurrentContext();</span></div><div class="line"></div><div class="line">    <span class="comment">//把这个view 画到当前的上下文当中 并进行渲染</span></div><div class="line">    [<span class="keyword">self</span>.DrawView drawViewHierarchyInRect:<span class="keyword">self</span>.DrawView.bounds afterScreenUpdates:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">    <span class="comment">//获取图片</span></div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">//关闭</span></div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 保存相册 - 完成的是有一定要使用系统的方法</span></div><div class="line">    <span class="built_in">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class="string">@"123123123"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)image:(<span class="built_in">UIImage</span>*)image didFinishSavingWithError:(<span class="built_in">NSError</span>*)error contextInfo:(<span class="keyword">void</span>*)contextInfo</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"保存成功"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, contextInfo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="整体思维导图"><a href="#整体思维导图" class="headerlink" title="整体思维导图"></a>整体思维导图</h2><p><img src="http://ww3.sinaimg.cn/large/9632d3f5jw1f8xdug15y0j21kw1yaaxd.jpg" alt=""></p>
<p>高清思维导图下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNotePictures/绘图.png" target="_blank" rel="external">绘图.png</a></p>
<p>MindNode源文件下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNote/绘图.zip" target="_blank" rel="external">绘图.mindnode</a></p>
<h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul>
<li>微博：<a href="http://weibo.com/u/2519913461" target="_blank" rel="external">@whong77</a></li>
<li>邮箱：<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x77;&#104;&#111;&#x6e;&#103;&#x37;&#57;&#49;&#x31;&#50;&#x30;&#55;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#x6d;">&#x77;&#104;&#111;&#x6e;&#103;&#x37;&#57;&#49;&#x31;&#50;&#x30;&#55;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#x6d;</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[内存警告方法]]></title>
      <url>http://whong7.github.io/2014/04/22/3.%E5%86%85%E5%AD%98%E8%AD%A6%E5%91%8A%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="内存警告方法"><a href="#内存警告方法" class="headerlink" title="内存警告方法"></a>内存警告方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (void)didReceiveMemoryWarning</div><div class="line">&#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line"></div><div class="line">    // Called when the parent application receives a memory warning.</div><div class="line">    // 这个方法在应用程序接受到内存警告的时候调用</div><div class="line">    // On iOS 6.0 it will no longer clear the view by default.</div><div class="line">    // 在6.0只有 不再默认清理 self.view</div><div class="line"></div><div class="line">    // 当这个view是否正在显示</div><div class="line">    // 这个view是否已经被加载</div><div class="line"></div><div class="line">    if (self.isViewLoaded &amp;&amp; self.view.window == nil) &#123;</div><div class="line">        [self setView:nil];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 处理当前控制器强引用的属性</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[控制器与视图的生命周期]]></title>
      <url>http://whong7.github.io/2014/04/19/2.%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E8%A7%86%E5%9B%BE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>控制器在导航控制器的生命周期<br>控制器在标签控制器的生命周期<br>控制器在nav的生命周期<br>视图的生命周期方法</p>
<a id="more"></a>
<h2 id="控制器在导航控制器的生命周期"><a href="#控制器在导航控制器的生命周期" class="headerlink" title="控制器在导航控制器的生命周期"></a>控制器在导航控制器的生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 控制器在nav中 push的时候 的过程</div><div class="line">// one 将要消失</div><div class="line">// two view加载完成</div><div class="line">// two 将要显示</div><div class="line">// one 已经消失</div><div class="line">// two 已经显示</div><div class="line"></div><div class="line">// 控制器在nav中 拖拽返回的时候</div><div class="line">// 拖拽的时候  two 将要消失 one 将要显示</div><div class="line">// 松手返回到上一个页面 two 已经消失 one 已经显示</div><div class="line"></div><div class="line">// 控制器在nav中 拖拽返回的时候</div><div class="line">// 拖拽的时候  two 将要消失 one 将要显示</div><div class="line">// 松手没有返回上一个页面  one 将要消失 one 已经消失 two 将要显示 two 已经显示</div></pre></td></tr></table></figure>
<h2 id="控制器在标签控制器的生命周期"><a href="#控制器在标签控制器的生命周期" class="headerlink" title="控制器在标签控制器的生命周期"></a>控制器在标签控制器的生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 控制器在tabbarController中的声明周期</div><div class="line">// two view加载完成</div><div class="line">// two view将要显示</div><div class="line">// one view将要消失</div><div class="line">// one view已经消失</div><div class="line">// two view已经显示</div></pre></td></tr></table></figure>
<h2 id="控制器在nav的生命周期"><a href="#控制器在nav的生命周期" class="headerlink" title="控制器在nav的生命周期"></a>控制器在nav的生命周期</h2><hr>
<p><strong>控制器在nav中push的时候的过程</strong><br>// one 将要消失<br>// two view加载完成<br>// two 将要显示<br>// one 已经消失<br>// two 已经显示</p>
<p><strong>控制器在nav中 拖拽返回的时候</strong><br>// 拖拽的时候  two 将要消失 one 将要显示<br>// 松手返回到上一个页面 two 已经消失 one 已经显示</p>
<p><strong>控制器在nav中 拖拽返回的时候</strong><br>// 拖拽的时候  two 将要消失 one 将要显示<br>// 松手没有返回上一个页面  one 将要消失 one 已经消失 two 将要显示 two 已经显示</p>
<hr>
<h2 id="视图的生命周期方法"><a href="#视图的生命周期方法" class="headerlink" title="视图的生命周期方法"></a>视图的生命周期方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DemoView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DemoView</span></span></div><div class="line"></div><div class="line"><span class="comment">// 将要移动到superView 通过'addSubView'</span></div><div class="line">- (<span class="keyword">void</span>)willMoveToSuperview:(<span class="keyword">nullable</span> <span class="built_in">UIView</span>*)newSuperview</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> willMoveToSuperview:newSuperview];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 已经移动到superView</span></div><div class="line">- (<span class="keyword">void</span>)didMoveToSuperview</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> didMoveToSuperview];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将要移动到window '显示/消失'</span></div><div class="line">- (<span class="keyword">void</span>)willMoveToWindow:(<span class="keyword">nullable</span> <span class="built_in">UIWindow</span>*)newWindow</div><div class="line">&#123;</div><div class="line"></div><div class="line">    [<span class="keyword">super</span> willMoveToWindow:newWindow];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"willMoveToWindow ------- &gt; %@"</span>, newWindow);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 已经移动到window '显示/消失'</span></div><div class="line">- (<span class="keyword">void</span>)didMoveToWindow</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> didMoveToWindow];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %s"</span>, <span class="keyword">self</span>.class, __FUNCTION__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>输出结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2016-07-09 13:17:27.255 05-控制器生命周期[31547:3527271] OneViewController -- -[ViewController viewDidLoad]</div><div class="line">2016-07-09 13:17:27.256 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView willMoveToSuperview:]</div><div class="line">2016-07-09 13:17:27.256 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView didMoveToSuperview]</div><div class="line">2016-07-09 13:17:27.258 05-控制器生命周期[31547:3527271] OneViewController -- -[ViewController viewWillAppear:]</div><div class="line">2016-07-09 13:17:27.258 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView willMoveToWindow:]</div><div class="line">2016-07-09 13:17:27.258 05-控制器生命周期[31547:3527271] willMoveToWindow ------- &gt; &lt;UIWindow: 0x7f8d88cbd2d0; frame = (0 0; 375 667); gestureRecognizers = &lt;NSArray: 0x7f8d88cbe4d0&gt;; layer = &lt;UIWindowLayer: 0x7f8d88cb1fc0&gt;&gt;</div><div class="line">2016-07-09 13:17:27.259 05-控制器生命周期[31547:3527271] DemoView -- -[DemoView didMoveToWindow]</div><div class="line">2016-07-09 13:17:27.266 05-控制器生命周期[31547:3527271] OneViewController -- -[ViewController viewDidAppear:]</div></pre></td></tr></table></figure>
<ul>
<li>如何判断一个view是否显示在屏幕上,如果这个view的.window属性,有值,证明他已经显示在当前的屏幕上,如果没有值的话,表示当前没有显示在屏幕上</li>
<li>addSubView 会触发’willMoveToSuperview’’didMoveToSuperview’的方法</li>
<li>这四个方法显示和消失的时候都会调用,只不过是移动到不同的view和不同window</li>
</ul>
<h2 id="整体思维导图"><a href="#整体思维导图" class="headerlink" title="整体思维导图"></a>整体思维导图</h2><p><img src="http://ww2.sinaimg.cn/large/9632d3f5jw1f905677xa0j21kw1qnh36.jpg" alt=""></p>
<p>高清思维导图下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNotePictures/生命周期.png" target="_blank" rel="external">绘图.png</a></p>
<p>MindNode源文件下载地址<br><a href="https://raw.githubusercontent.com/whong7/whong7.github.io/master/MindNote/%20生命周期.zip" target="_blank" rel="external">绘图.mindnode</a></p>
<h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul>
<li>微博：<a href="http://weibo.com/u/2519913461" target="_blank" rel="external">@whong77</a></li>
<li>邮箱：<a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x77;&#x68;&#111;&#110;&#103;&#x37;&#x39;&#x31;&#x31;&#x32;&#48;&#55;&#x40;&#x31;&#x36;&#x33;&#x2e;&#x63;&#111;&#x6d;">&#x77;&#x68;&#111;&#110;&#103;&#x37;&#x39;&#x31;&#x31;&#x32;&#48;&#55;&#x40;&#x31;&#x36;&#x33;&#x2e;&#x63;&#111;&#x6d;</a></li>
</ul>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://whong7.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
